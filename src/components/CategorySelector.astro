---
// src/components/CategorySelector.astro
// ============================================
// üìÇ CMDOLA - S√©lecteur de cat√©gories horizontal
// ============================================

import api from '../lib/api'; // ‚úÖ Import par d√©faut (plus propre)
import "../assets/app.css";

interface Props {
  selectedCategory?: string;
}

const {
  selectedCategory = 'all',
} = Astro.props;

// Cat√©gories par d√©faut (fallback)
const defaultCategories = [
  { id: 'entrees', name: 'Entr√©es', icon: 'ü•ó' },
  { id: 'plats', name: 'Plats', icon: 'üçΩÔ∏è' },
  { id: 'pizzas', name: 'Pizzas', icon: 'üçï' },
  { id: 'burgers', name: 'Burgers', icon: 'üçî' },
  { id: 'boissons', name: 'Boissons', icon: 'ü•§' },
  { id: 'desserts', name: 'Desserts', icon: 'üç∞' },
];

// R√©cup√©rer les cat√©gories depuis l'API
let categories: Array<{ id: string; name: string; icon: string }> = [];

try {
  // ‚úÖ Utilise d√©j√† api.ts correctement (pas de restaurant_id n√©cessaire)
  const menu = await api.menu.get();
  categories = menu.categories || [];
  
  // Si pas de cat√©gories, utiliser les cat√©gories par d√©faut
  if (categories.length === 0) {
    console.warn('‚ö†Ô∏è  Aucune cat√©gorie depuis l\'API, utilisation des cat√©gories par d√©faut');
    categories = defaultCategories;
  }
} catch (error) {
  console.error('‚ùå Erreur chargement cat√©gories:', error);
  // ‚úÖ Fallback sur les cat√©gories par d√©faut en cas d'erreur
  categories = defaultCategories;
}

// Ajouter "Tout" au d√©but
const allCategories = [
  { id: 'all', name: 'Tout', icon: 'üç¥' },
  ...categories,
];
---

<!-- Container principal avec scroll horizontal -->
<div class="w-full bg-base-100 border-b border-base-300">
  <div class="container mx-auto px-4 py-4">
    
    <!-- Conteneur scrollable horizontal -->
    <div 
      class="flex gap-3 overflow-x-auto scrollbar-hide snap-x snap-mandatory"
      id="category-scroll"
    >
      {allCategories.map((category) => (
        <button
          data-category={category.id}
          class={`
            btn btn-lg flex-shrink-0 snap-start
            ${selectedCategory === category.id ? 'btn-primary' : 'btn-ghost'}
            flex flex-col items-center justify-center
            min-w-[100px] h-auto py-3 px-4
            hover:btn-primary hover:scale-105
            transition-all duration-200
          `}
        >
          <!-- Ic√¥ne -->
          <span class="text-3xl mb-1" aria-hidden="true">
            {category.icon}
          </span>
          
          <!-- Nom -->
          <span class="text-xs font-medium whitespace-nowrap">
            {category.name}
          </span>
        </button>
      ))}
    </div>

  </div>
</div>

<style>
  /* Masquer la scrollbar mais garder le scroll */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Smooth scroll */
  #category-scroll {
    scroll-behavior: smooth;
  }

  /* Effet au hover */
  button[data-category]:hover {
    transform: translateY(-2px);
  }

  /* Animation pour la cat√©gorie active */
  button[data-category].btn-primary {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 
                0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Responsive - Ajuster la taille des boutons sur petit √©cran */
  @media (max-width: 640px) {
    button[data-category] {
      min-width: 85px;
      padding: 0.75rem 0.5rem;
    }
    
    button[data-category] span:first-child {
      font-size: 2rem;
    }
  }

  /* Responsive - Plus d'espace sur grand √©cran */
  @media (min-width: 1024px) {
    button[data-category] {
      min-width: 120px;
    }
  }
</style>

<script>
  // üéØ Gestion c√¥t√© client de la s√©lection de cat√©gorie
  
  interface CategoryChangeEvent extends CustomEvent {
    detail: {
      categoryId: string;
      categoryName: string;
    };
  }

  // Fonction pour initialiser les boutons
  function initCategoryButtons() {
    const buttons = document.querySelectorAll('button[data-category]');
    
    buttons.forEach((button) => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const categoryId = this.dataset.category;
        if (!categoryId) return;

        // Retirer la classe active de tous les boutons
        buttons.forEach((btn) => {
          btn.classList.remove('btn-primary');
          btn.classList.add('btn-ghost');
        });

        // Ajouter la classe active au bouton cliqu√©
        this.classList.remove('btn-ghost');
        this.classList.add('btn-primary');

        // Trouver le nom de la cat√©gorie
        const categoryName = this.querySelector('span:last-child')?.textContent || '';

        // √âmettre un √©v√©nement personnalis√©
        const event: CategoryChangeEvent = new CustomEvent('category-changed', {
          detail: {
            categoryId,
            categoryName,
          },
          bubbles: true,
        }) as CategoryChangeEvent;
        
        document.dispatchEvent(event);

        // Sauvegarder dans localStorage
        localStorage.setItem('selectedCategory', categoryId);

        // Log pour debug
        console.log('‚úÖ Cat√©gorie s√©lectionn√©e:', categoryId, categoryName);
      });
    });

    // Restaurer la cat√©gorie depuis localStorage au chargement
    const savedCategory = localStorage.getItem('selectedCategory');
    if (savedCategory) {
      const savedButton = document.querySelector(`button[data-category="${savedCategory}"]`);
      if (savedButton) {
        buttons.forEach((btn) => {
          btn.classList.remove('btn-primary');
          btn.classList.add('btn-ghost');
        });
        savedButton.classList.remove('btn-ghost');
        savedButton.classList.add('btn-primary');
      }
    }
  }

  // Initialiser au chargement
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCategoryButtons);
  } else {
    initCategoryButtons();
  }

  // Support pour Astro View Transitions
  document.addEventListener('astro:page-load', initCategoryButtons);

  // Support du swipe tactile pour am√©liorer l'exp√©rience mobile
  if (typeof window !== 'undefined') {
    const scrollContainer = document.getElementById('category-scroll');
    
    if (scrollContainer) {
      let isDown = false;
      let startX: number;
      let scrollLeft: number;

      scrollContainer.addEventListener('mousedown', (e) => {
        isDown = true;
        scrollContainer.style.cursor = 'grabbing';
        startX = e.pageX - scrollContainer.offsetLeft;
        scrollLeft = scrollContainer.scrollLeft;
      });

      scrollContainer.addEventListener('mouseleave', () => {
        isDown = false;
        scrollContainer.style.cursor = 'grab';
      });

      scrollContainer.addEventListener('mouseup', () => {
        isDown = false;
        scrollContainer.style.cursor = 'grab';
      });

      scrollContainer.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - scrollContainer.offsetLeft;
        const walk = (x - startX) * 2;
        scrollContainer.scrollLeft = scrollLeft - walk;
      });
    }
  }
</script>