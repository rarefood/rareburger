---
// src/components/ProductGrid.astro
// ============================================
// üìã CMDOLA - Grille de Produits Responsive
// ============================================

import { api } from '../lib/api';
import ProductCard from './ProductCard.astro';
import "../assets/app.css";

interface Props {
  category?: string;
  limit?: number;
}

const {
  category = 'all',
  limit,
} = Astro.props;

// R√©cup√©rer les produits depuis l'API
let products: any[] = [];
let apiError = false;

try {
  const menu = await api.menu.get();
  products = menu.produits || [];
  
  // Si pas de produits, utiliser des donn√©es de d√©mo
  if (products.length === 0) {
    console.warn('‚ö†Ô∏è  Aucun produit depuis l\'API, utilisation de donn√©es de d√©mo');
    apiError = true;
    products = [
      { id: 'demo-1', nom: 'Pizza Margherita', description: 'Sauce tomate, mozzarella, basilic frais', prix: 12.50, category: 'pizzas', disponible: true, popular: true },
      { id: 'demo-2', nom: 'Burger Classic', description: 'Steak hach√©, salade, tomate, oignons', prix: 10.90, category: 'burgers', disponible: true, popular: false },
      { id: 'demo-3', nom: 'Salade C√©sar', description: 'Poulet grill√©, parmesan, cro√ªtons', prix: 9.50, category: 'entrees', disponible: true, popular: true },
      { id: 'demo-4', nom: 'Tiramisu', description: 'Mascarpone, caf√©, cacao', prix: 6.50, category: 'desserts', disponible: true, popular: false },
      { id: 'demo-5', nom: 'Coca Cola', description: '33cl', prix: 2.50, category: 'boissons', disponible: true, popular: false },
      { id: 'demo-6', nom: 'Pizza 4 Fromages', description: 'Mozzarella, gorgonzola, ch√®vre, parmesan', prix: 14.50, category: 'pizzas', disponible: true, popular: true },
    ];
  }
  
  // Filtrer par cat√©gorie si n√©cessaire
  if (category && category !== 'all') {
    products = products.filter(p => 
      p.category?.toLowerCase() === category.toLowerCase()
    );
  }
  
  // Limiter le nombre de produits si demand√©
  if (limit) {
    products = products.slice(0, limit);
  }
  
  // Trier : produits disponibles en premier, puis populaires
  products.sort((a, b) => {
    if (a.disponible !== b.disponible) {
      return b.disponible ? 1 : -1;
    }
    if (a.popular !== b.popular) {
      return b.popular ? 1 : -1;
    }
    return 0;
  });
  
} catch (error) {
  console.error('Erreur chargement produits:', error);
  apiError = true;
  // Donn√©es de d√©mo en cas d'erreur
  products = [
    { id: 'demo-1', nom: 'Pizza Margherita', description: 'Sauce tomate, mozzarella, basilic frais', prix: 12.50, category: 'pizzas', disponible: true, popular: true },
    { id: 'demo-2', nom: 'Burger Classic', description: 'Steak hach√©, salade, tomate, oignons', prix: 10.90, category: 'burgers', disponible: true, popular: false },
    { id: 'demo-3', nom: 'Salade C√©sar', description: 'Poulet grill√©, parmesan, cro√ªtons', prix: 9.50, category: 'entrees', disponible: true, popular: true },
  ];
}
---

<div class="container mx-auto px-4 py-6">
  
  <!-- Alerte si mode d√©mo -->
  {apiError && (
    <div class="alert alert-warning mb-4">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
      </svg>
      <span>
        <strong>Mode d√©mo :</strong> Le serveur Flask n'est pas accessible. D√©marrez votre API avec <code class="bg-base-200 px-2 py-1 rounded">python app.py</code>
      </span>
    </div>
  )}
  
  <!-- En-t√™te optionnel -->
  {category !== 'all' && (
    <div class="mb-6">
      <h2 class="text-2xl font-bold">
        {category.charAt(0).toUpperCase() + category.slice(1)}
      </h2>
      <div class="divider"></div>
    </div>
  )}

  {/* Grille responsive */}
  {products.length > 0 ? (
    <div 
      class="
        grid gap-4
        grid-cols-1
        sm:grid-cols-2
        lg:grid-cols-3
        xl:grid-cols-4
        2xl:grid-cols-5
      "
      id="product-grid"
    >
      {products.map((product) => {
        // Construire les URLs compl√®tes des images
        const images = (product.images || []).map((img: string) => {
          if (img.startsWith('http')) return img;
          const apiUrl = import.meta.env.PUBLIC_API_URL || 'https://api.rareburger.be/api';
          const restaurantId = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';
          return `${apiUrl}/images/${restaurantId}/${img}`;
        });
        
        return (
          <ProductCard
            id={product.id}
            nom={product.nom || product.name}
            description={product.description}
            prix={product.prix || product.price}
            category={product.category}
            image={images[0]}
            images={images}
            disponible={product.disponible ?? true}
            popular={product.popular ?? false}
            supplements={product.supplements || []}
            removable_ingredients={product.removable_ingredients || []}
            allergenes={product.allergenes || []}
          />
        );
      })}
    </div>
  ) : (
    /* Message si aucun produit */
    <div class="flex flex-col items-center justify-center py-12">
      <div class="text-6xl mb-4">üçΩÔ∏è</div>
      <h3 class="text-xl font-bold mb-2">Aucun produit disponible</h3>
      <p class="text-base-content/60">
        {category !== 'all' 
          ? `Aucun produit dans la cat√©gorie "${category}"` 
          : 'Le menu est en cours de pr√©paration'}
      </p>
    </div>
  )}
</div>

<style>
  /* Smooth animation pour le grid */
  #product-grid {
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Gap responsive */
  @media (max-width: 640px) {
    #product-grid {
      gap: 1rem;
    }
  }

  @media (min-width: 1024px) {
    #product-grid {
      gap: 1.5rem;
    }
  }
</style>

<script>
  // üéØ Filtrage dynamique par cat√©gorie
  function handleCategoryChange(e: CustomEvent) {
    console.log('üéØ √âv√©nement category-changed re√ßu:', e.detail);
    
    const categoryId = e.detail.categoryId;
    const productGrid = document.getElementById('product-grid');
    
    if (!productGrid) {
      console.warn('‚ö†Ô∏è ProductGrid non trouv√©');
      return;
    }
    
    const allProducts = productGrid.querySelectorAll('[data-product-id]');
    
    console.log(`üì¶ ${allProducts.length} produits trouv√©s`);
    
    allProducts.forEach((product) => {
      const productElement = product as HTMLElement;
      const productCategory = productElement.dataset.category;
      
      if (categoryId === 'all') {
        // Afficher tous les produits
        productElement.style.display = '';
        setTimeout(() => {
          productElement.style.opacity = '1';
          productElement.style.transform = 'scale(1)';
        }, 50);
      } else if (productCategory?.toLowerCase() === categoryId.toLowerCase()) {
        // Afficher les produits de cette cat√©gorie
        productElement.style.display = '';
        setTimeout(() => {
          productElement.style.opacity = '1';
          productElement.style.transform = 'scale(1)';
        }, 50);
      } else {
        // Masquer les autres
        productElement.style.opacity = '0';
        productElement.style.transform = 'scale(0.95)';
        setTimeout(() => {
          productElement.style.display = 'none';
        }, 200);
      }
    });
    
    // V√©rifier s'il reste des produits visibles
    setTimeout(() => {
      const visibleProducts = Array.from(allProducts).filter(
        (p) => (p as HTMLElement).style.display !== 'none'
      );
      
      console.log(`üëÅÔ∏è ${visibleProducts.length} produits visibles`);
      
      if (visibleProducts.length === 0) {
        showEmptyMessage(categoryId);
      } else {
        hideEmptyMessage();
      }
    }, 300);
  }

  // √âcouter l'√©v√©nement
  document.addEventListener('category-changed', handleCategoryChange as EventListener);
  
  // Support Astro View Transitions
  document.addEventListener('astro:page-load', () => {
    document.addEventListener('category-changed', handleCategoryChange as EventListener);
  });

  // Afficher un message si aucun produit
  function showEmptyMessage(category: string) {
    const grid = document.getElementById('product-grid');
    if (!grid) return;
    
    let emptyMsg = document.getElementById('empty-message');
    if (!emptyMsg) {
      emptyMsg = document.createElement('div');
      emptyMsg.id = 'empty-message';
      emptyMsg.className = 'col-span-full flex flex-col items-center justify-center py-12';
      emptyMsg.innerHTML = `
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-xl font-bold mb-2">Aucun produit trouv√©</h3>
        <p class="text-base-content/60">Aucun produit dans la cat√©gorie "${category}"</p>
      `;
      grid.appendChild(emptyMsg);
    }
    emptyMsg.style.display = 'flex';
  }

  function hideEmptyMessage() {
    const emptyMsg = document.getElementById('empty-message');
    if (emptyMsg) {
      emptyMsg.style.display = 'none';
    }
  }

  // Animation au scroll (optionnel)
  if (typeof window !== 'undefined' && 'IntersectionObserver' in window) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fadeIn');
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    document.addEventListener('astro:page-load', () => {
      document.querySelectorAll('.card').forEach((card) => {
        observer.observe(card);
      });
    });
  }
</script>