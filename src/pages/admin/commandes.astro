---
// src/pages/admin/commandes.astro
import AdminLayout from '../../layouts/AdminLayout.astro';

export const prerender = false;

// V√©rification auth c√¥t√© serveur
const user = Astro.locals.user;
if (!user || !user.roles.includes('admin')) {
  return Astro.redirect('/login');
}
---

<AdminLayout title="Commandes">
  
  <div class="mb-6">
    <div class="flex justify-between items-start">
      <div>
        <h1 class="text-3xl font-bold">Gestion des commandes</h1>
        <p class="text-base-content/60">Consultez et g√©rez toutes vos commandes</p>
      </div>
      <div class="flex items-center gap-2">
        <span id="refreshIndicator" class="text-sm text-base-content/60 hidden">
          üîÑ Actualisation...
        </span>
        <button id="toggleAutoRefresh" class="btn btn-sm btn-ghost gap-2">
          <span id="autoRefreshIcon">üîÑ</span>
          <span id="autoRefreshText">Auto-refresh ON</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Filtres -->
  <div class="card bg-base-100 shadow-lg mb-6">
    <div class="card-body">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        
        <div class="form-control">
          <label class="label">
            <span class="label-text">Statut</span>
          </label>
          <select class="select select-bordered" id="filterStatus">
            <option value="">Tous</option>
            <option value="nouvelle">Nouvelle</option>
            <option value="en_preparation">En pr√©paration</option>
            <option value="prete">Pr√™te</option>
            <option value="en_livraison">En livraison</option>
            <option value="livree">Livr√©e</option>
            <option value="terminee">Termin√©e</option>
            <option value="annulee">Annul√©e</option>
          </select>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">P√©riode</span>
          </label>
          <select class="select select-bordered" id="filterPeriod">
            <option value="all">Toutes</option>
            <option value="today">Aujourd'hui</option>
            <option value="week">Cette semaine</option>
            <option value="month">Ce mois</option>
            <option value="year">Cette ann√©e</option>
          </select>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Paiement</span>
          </label>
          <select class="select select-bordered" id="filterPayment">
            <option value="">Tous</option>
            <option value="en_ligne">En ligne</option>
            <option value="comptoir">Au comptoir</option>
            <option value="reception">√Ä la r√©ception</option>
          </select>
        </div>

        <div class="form-control">
          <label class="label">
            <span class="label-text">Tri</span>
          </label>
          <select class="select select-bordered" id="filterSort">
            <option value="recent">Plus r√©cent ‚Üí ancien</option>
            <option value="oldest">Plus ancien ‚Üí r√©cent</option>
          </select>
        </div>

      </div>

      <div class="flex justify-between items-center mt-4">
        <div class="text-sm text-base-content/60">
          <span id="totalCount">0</span> commande(s) trouv√©e(s)
        </div>
        <button class="btn btn-ghost btn-sm" id="resetFilters">
          R√©initialiser les filtres
        </button>
      </div>
    </div>
  </div>

  <!-- Actions group√©es -->
  <div id="bulkActions" class="card bg-base-100 shadow-lg mb-6 hidden">
    <div class="card-body">
      <div class="flex flex-wrap gap-2 items-center">
        <span class="font-bold"><span id="selectedCount">0</span> s√©lectionn√©e(s)</span>
        <div class="divider divider-horizontal"></div>
        <button class="btn btn-sm btn-primary" id="exportCSV">
          Export CSV
        </button>
        <button class="btn btn-sm btn-primary" id="exportPDF">
          Export PDF
        </button>
        <button class="btn btn-sm btn-error" id="deleteSelected">
          Supprimer la s√©lection
        </button>
      </div>
    </div>
  </div>

  <!-- Loader -->
  <div id="loader" class="flex justify-center py-20">
    <span class="loading loading-spinner loading-lg"></span>
  </div>

  <!-- Tableau -->
  <div id="tableContainer" class="card bg-base-100 shadow-lg hidden">
    <div class="card-body overflow-x-auto">
      <table class="table table-zebra">
        <thead>
          <tr>
            <th>
              <input type="checkbox" class="checkbox checkbox-sm" id="selectAll" />
            </th>
            <th>Num√©ro</th>
            <th>Date</th>
            <th>Client</th>
            <th>Type</th>
            <th>Montant</th>
            <th>Paiement</th>
            <th>Statut</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="commandesTable">
        </tbody>
      </table>
    </div>
  </div>

  <!-- Message vide -->
  <div id="emptyState" class="hidden text-center py-20">
    <div class="text-6xl mb-4">üì¶</div>
    <h3 class="text-xl font-bold mb-2">Aucune commande</h3>
    <p class="text-base-content/60">Aucune commande ne correspond √† vos filtres</p>
  </div>

</AdminLayout>

<script>
// ==========================================
// üöÄ Imports
// ==========================================
import { api } from '../../lib/api';

// ==========================================
// Variables Globales
// ==========================================
let allCommandes = [];
let filteredCommandes = [];
let selectedIds = new Set();
let autoRefreshInterval = null;
let autoRefreshEnabled = true;

// ==========================================
// Utilitaires
// ==========================================
function formatPrice(price) {
  return new Intl.NumberFormat('fr-BE', {
    style: 'currency',
    currency: 'EUR'
  }).format(price);
}

function formatDate(dateStr) {
  const date = new Date(dateStr);
  return new Intl.DateTimeFormat('fr-BE', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
}

function getStatusBadge(statut) {
  const badges = {
    'nouvelle': 'badge-warning',
    'en_preparation': 'badge-info',
    'prete': 'badge-success',
    'en_livraison': 'badge-primary',
    'livree': 'badge-success',
    'terminee': 'badge-ghost',
    'annulee': 'badge-error'
  };
  return badges[statut] || 'badge-ghost';
}

function getStatusLabel(statut) {
  const labels = {
    'nouvelle': 'Nouvelle',
    'en_preparation': 'En pr√©paration',
    'prete': 'Pr√™te',
    'en_livraison': 'En livraison',
    'livree': 'Livr√©e',
    'terminee': 'Termin√©e',
    'annulee': 'Annul√©e'
  };
  return labels[statut] || statut;
}

// ==========================================
// Chargement Config & Th√®me
// ==========================================
async function loadConfig() {
  try {
    const config = await api.config.get();
    
    if (config.theme?.daisy) {
      document.documentElement.setAttribute('data-theme', config.theme.daisy);
    }
    
    if (config.theme?.logo) {
      const logoUrl = api.images.getUrl(config.theme.logo);
      const favicon = document.getElementById('favicon');
      if (favicon) favicon.href = logoUrl;
    }
  } catch (error) {
    console.error('‚ùå Erreur config:', error);
  }
}

// ==========================================
// Chargement Commandes
// ==========================================
async function loadCommandes(silent = false) {
  try {
    console.log('üîÑ Chargement commandes...');
    
    // ‚úÖ Utilise api.ts (avec token auto)
    const data = await api.commandes.list();
    
    allCommandes = data.commandes || [];
    
    console.log(`‚úÖ ${allCommandes.length} commandes charg√©es`);
    
    applyFilters();
    
  } catch (error) {
    console.error('‚ùå Erreur chargement commandes:', error);
    
    // Gestion erreur auth
    if (error.message.includes('Token') || error.message.includes('401')) {
      alert('Session expir√©e, veuillez vous reconnecter');
      window.location.href = '/login';
      return;
    }
    
    document.getElementById('loader').innerHTML = `
      <div class="alert alert-error">
        <span>Erreur de chargement des commandes</span>
      </div>
    `;
  }
}

// ==========================================
// Filtrage & Affichage
// ==========================================
function applyFilters() {
  const statusFilter = document.getElementById('filterStatus').value;
  const periodFilter = document.getElementById('filterPeriod').value;
  const paymentFilter = document.getElementById('filterPayment').value;
  const sortFilter = document.getElementById('filterSort').value;

  filteredCommandes = allCommandes.filter(cmd => {
    if (statusFilter && cmd.statut !== statusFilter) return false;
    if (paymentFilter && cmd.paiement?.mode !== paymentFilter) return false;
    
    if (periodFilter !== 'all') {
      const cmdDate = new Date(cmd.date_creation);
      const now = new Date();
      
      if (periodFilter === 'today') {
        if (cmdDate.toDateString() !== now.toDateString()) return false;
      } else if (periodFilter === 'week') {
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        if (cmdDate < weekAgo) return false;
      } else if (periodFilter === 'month') {
        if (cmdDate.getMonth() !== now.getMonth() || cmdDate.getFullYear() !== now.getFullYear()) return false;
      } else if (periodFilter === 'year') {
        if (cmdDate.getFullYear() !== now.getFullYear()) return false;
      }
    }
    
    return true;
  });

  if (sortFilter === 'recent') {
    filteredCommandes.sort((a, b) => new Date(b.date_creation) - new Date(a.date_creation));
  } else {
    filteredCommandes.sort((a, b) => new Date(a.date_creation) - new Date(b.date_creation));
  }

  renderTable();
}

function renderTable() {
  const table = document.getElementById('commandesTable');
  const totalCount = document.getElementById('totalCount');
  const loader = document.getElementById('loader');
  const tableContainer = document.getElementById('tableContainer');
  const emptyState = document.getElementById('emptyState');

  totalCount.textContent = filteredCommandes.length;
  loader.classList.add('hidden');

  if (filteredCommandes.length === 0) {
    tableContainer.classList.add('hidden');
    emptyState.classList.remove('hidden');
    return;
  }

  emptyState.classList.add('hidden');
  tableContainer.classList.remove('hidden');

  table.innerHTML = filteredCommandes.map(cmd => `
    <tr>
      <td>
        <input type="checkbox" class="checkbox checkbox-sm cmd-checkbox" data-id="${cmd.id}" />
      </td>
      <td>
        <span class="font-mono font-bold">${cmd.numero}</span>
      </td>
      <td>${formatDate(cmd.date_creation)}</td>
      <td>${cmd.client?.nom || 'N/A'} ${cmd.client?.prenom || ''}</td>
      <td>
        <span class="badge badge-sm">${cmd.type || 'N/A'}</span>
      </td>
      <td class="font-bold">${formatPrice(cmd.prix_total)}</td>
      <td>${cmd.paiement?.mode || 'N/A'}</td>
      <td>
        <span class="badge ${getStatusBadge(cmd.statut)} badge-sm">
          ${getStatusLabel(cmd.statut)}
        </span>
      </td>
      <td>
        <div class="join">
          <button class="btn btn-xs btn-ghost join-item edit-btn" data-id="${cmd.id}">
            ‚úèÔ∏è
          </button>
          <button class="btn btn-xs btn-ghost join-item delete-btn" data-id="${cmd.id}">
            üóëÔ∏è
          </button>
        </div>
      </td>
    </tr>
  `).join('');

  // Restaurer les s√©lections apr√®s le refresh
  document.querySelectorAll('.cmd-checkbox').forEach(checkbox => {
    if (selectedIds.has(checkbox.dataset.id)) {
      checkbox.checked = true;
    }
  });

  attachCheckboxListeners();
  attachActionButtons();
}

// ==========================================
// Gestion des checkboxes
// ==========================================
function attachCheckboxListeners() {
  document.querySelectorAll('.cmd-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', (e) => {
      const id = e.target.dataset.id;
      if (e.target.checked) {
        selectedIds.add(id);
      } else {
        selectedIds.delete(id);
      }
      updateSelection();
    });
  });

  document.getElementById('selectAll').addEventListener('change', (e) => {
    const checkboxes = document.querySelectorAll('.cmd-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = e.target.checked;
      if (e.target.checked) {
        selectedIds.add(cb.dataset.id);
      } else {
        selectedIds.delete(cb.dataset.id);
      }
    });
    updateSelection();
  });
}

function updateSelection() {
  const bulkActions = document.getElementById('bulkActions');
  const selectedCount = document.getElementById('selectedCount');
  
  selectedCount.textContent = selectedIds.size;
  
  if (selectedIds.size > 0) {
    bulkActions.classList.remove('hidden');
  } else {
    bulkActions.classList.add('hidden');
  }
}

// ==========================================
// Actions sur les commandes
// ==========================================
function attachActionButtons() {
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.dataset.id;
      window.location.href = `/admin/commandes/edit?id=${id}`;
    });
  });

  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.dataset.id;
      if (confirm('Supprimer cette commande ?')) {
        await deleteCommande(id);
      }
    });
  });
}

async function deleteCommande(id) {
  try {
    console.log(`üóëÔ∏è Suppression commande: ${id}`);
    
    // ‚úÖ Utilise api.ts
    await api.commandes.delete(id);
    
    console.log('‚úÖ Commande supprim√©e');
    
    await loadCommandes();
    
  } catch (error) {
    console.error('‚ùå Erreur suppression:', error);
    
    if (error.message.includes('Token') || error.message.includes('401')) {
      alert('Session expir√©e, veuillez vous reconnecter');
      window.location.href = '/login';
    } else {
      alert('Erreur lors de la suppression');
    }
  }
}

// ==========================================
// Filtres & Exports
// ==========================================
document.getElementById('filterStatus').addEventListener('change', applyFilters);
document.getElementById('filterPeriod').addEventListener('change', applyFilters);
document.getElementById('filterPayment').addEventListener('change', applyFilters);
document.getElementById('filterSort').addEventListener('change', applyFilters);

document.getElementById('resetFilters').addEventListener('click', () => {
  document.getElementById('filterStatus').value = '';
  document.getElementById('filterPeriod').value = 'all';
  document.getElementById('filterPayment').value = '';
  document.getElementById('filterSort').value = 'recent';
  applyFilters();
});

document.getElementById('deleteSelected').addEventListener('click', async () => {
  if (selectedIds.size === 0) return;
  
  if (confirm(`Supprimer ${selectedIds.size} commande(s) ?`)) {
    for (const id of selectedIds) {
      await deleteCommande(id);
    }
    selectedIds.clear();
    updateSelection();
  }
});

document.getElementById('exportCSV').addEventListener('click', () => {
  const selected = filteredCommandes.filter(cmd => selectedIds.has(cmd.id));
  const csv = [
    ['Num√©ro', 'Date', 'Client', 'Type', 'Montant', 'Statut', 'Paiement'].join(','),
    ...selected.map(cmd => [
      cmd.numero,
      cmd.date_creation,
      `${cmd.client?.nom || ''} ${cmd.client?.prenom || ''}`,
      cmd.type,
      cmd.prix_total,
      cmd.statut,
      cmd.paiement?.mode || ''
    ].join(','))
  ].join('\n');

  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `commandes_${Date.now()}.csv`;
  a.click();
});

document.getElementById('exportPDF').addEventListener('click', () => {
  alert('Export PDF √† impl√©menter avec une biblioth√®que comme jsPDF');
});

// ==========================================
// Auto-Refresh
// ==========================================
function startAutoRefresh() {
  if (autoRefreshInterval) return;
  
  autoRefreshInterval = setInterval(async () => {
    const indicator = document.getElementById('refreshIndicator');
    indicator.classList.remove('hidden');
    
    await loadCommandes(true);
    
    setTimeout(() => {
      indicator.classList.add('hidden');
    }, 1000);
  }, 10000); // 10 secondes
}

function stopAutoRefresh() {
  if (autoRefreshInterval) {
    clearInterval(autoRefreshInterval);
    autoRefreshInterval = null;
  }
}

function toggleAutoRefresh() {
  autoRefreshEnabled = !autoRefreshEnabled;
  
  const icon = document.getElementById('autoRefreshIcon');
  const text = document.getElementById('autoRefreshText');
  const btn = document.getElementById('toggleAutoRefresh');
  
  if (autoRefreshEnabled) {
    startAutoRefresh();
    icon.textContent = 'üîÑ';
    text.textContent = 'Auto-refresh ON';
    btn.classList.remove('btn-error');
    btn.classList.add('btn-ghost');
  } else {
    stopAutoRefresh();
    icon.textContent = '‚è∏Ô∏è';
    text.textContent = 'Auto-refresh OFF';
    btn.classList.remove('btn-ghost');
    btn.classList.add('btn-error');
  }
}

document.getElementById('toggleAutoRefresh').addEventListener('click', toggleAutoRefresh);

// ==========================================
// Initialisation
// ==========================================
console.log('üì¶ Gestion Commandes charg√©e');

loadConfig();
loadCommandes();
startAutoRefresh();

// Cleanup
window.addEventListener('beforeunload', stopAutoRefresh);
</script>