---
// src/pages/admin/config.astro
import AdminLayout from '../../layouts/AdminLayout.astro';

export const prerender = false;

const RESTAURANT_ID = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';
---

<AdminLayout title="Configuration">
  
  <div class="mb-6">
    <h1 class="text-3xl font-bold">Configuration du restaurant</h1>
    <p class="text-base-content/60">G√©rez tous les param√®tres de votre restaurant</p>
  </div>

  <!-- Loader -->
  <div id="loader" class="flex justify-center py-20">
    <span class="loading loading-spinner loading-lg"></span>
  </div>

  <!-- Contenu -->
  <div id="configContent" class="hidden">

    <!-- Tabs -->
    <div role="tablist" class="tabs tabs-boxed mb-6">
      <a role="tab" class="tab tab-active" id="tabInfos">Informations</a>
      <a role="tab" class="tab" id="tabHoraires">Horaires</a>
      <a role="tab" class="tab" id="tabServices">Services</a>
      <a role="tab" class="tab" id="tabPaiements">Paiements</a>
      <a role="tab" class="tab" id="tabEmployes">Employ√©s</a>
      <a role="tab" class="tab" id="tabTheme">Th√®me</a>
      <a role="tab" class="tab" id="tabSecurite">S√©curit√©</a>
    </div>

    <!-- Section Informations -->
    <div id="sectionInfos">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Informations g√©n√©rales</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            
            <div class="form-control md:col-span-2">
              <label class="label"><span class="label-text">ID Restaurant (non modifiable)</span></label>
              <input type="text" id="restaurantId" class="input input-bordered input-disabled" disabled />
            </div>

            <div class="form-control">
              <label class="label"><span class="label-text">Nom du restaurant</span></label>
              <input type="text" id="nom" class="input input-bordered" />
            </div>

            <div class="form-control">
              <label class="label"><span class="label-text">T√©l√©phone</span></label>
              <input type="tel" id="telephone" class="input input-bordered" />
            </div>

            <div class="form-control md:col-span-2">
              <label class="label"><span class="label-text">Email</span></label>
              <input type="email" id="email" class="input input-bordered" />
            </div>

            <div class="form-control md:col-span-2">
              <label class="label"><span class="label-text">Description</span></label>
              <textarea id="description" class="textarea textarea-bordered h-24"></textarea>
            </div>

            <div class="form-control md:col-span-2">
              <label class="label"><span class="label-text">Adresse compl√®te</span></label>
              <textarea id="adresse" class="textarea textarea-bordered"></textarea>
            </div>

            <div class="form-control">
              <label class="label"><span class="label-text">Instagram</span></label>
              <input type="text" id="instagram" class="input input-bordered" placeholder="@votre_compte" />
            </div>

            <div class="form-control">
              <label class="label"><span class="label-text">Facebook</span></label>
              <input type="text" id="facebook" class="input input-bordered" placeholder="URL Facebook" />
            </div>

          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="saveInfosBtn">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Section Horaires -->
    <div id="sectionHoraires" class="hidden">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Horaires d'ouverture</h2>
          
          <div class="space-y-4" id="horairesContainer">
          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="saveHorairesBtn">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Section Services -->
    <div id="sectionServices" class="hidden">
      
      <!-- Modes de service -->
      <div class="card bg-base-100 shadow-lg mb-6">
        <div class="card-body">
          <h2 class="card-title">Modes de service</h2>
          
          <div class="space-y-4" id="modesServiceContainer">
          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="saveServicesBtn">Enregistrer</button>
          </div>
        </div>
      </div>

      <!-- Zones de livraison -->
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <div class="flex justify-between items-center mb-4">
            <h2 class="card-title">Zones de livraison</h2>
            <button class="btn btn-sm btn-primary" id="addZoneBtn">Ajouter zone</button>
          </div>
          
          <div class="space-y-3" id="zonesContainer">
          </div>
        </div>
      </div>

    </div>

    <!-- Section Paiements -->
    <div id="sectionPaiements" class="hidden">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">M√©thodes de paiement</h2>
          
          <div class="space-y-4" id="paiementsContainer">
          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="savePaiementsBtn">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Section Employ√©s -->
<div id="sectionEmployes" class="hidden">
  
  <!-- Chefs -->
  <div class="card bg-base-100 shadow-lg mb-6">
    <div class="card-body">
      <div class="flex justify-between items-center mb-4">
        <h2 class="card-title">üë®‚Äçüç≥ Chefs de cuisine</h2>
        <button class="btn btn-primary btn-sm" onclick="openAddEmployeModal('chef')">
          + Ajouter un chef
        </button>
      </div>
      <div class="space-y-2" id="chefsContainer">
        <!-- Rempli par JS -->
      </div>
    </div>
  </div>

  <!-- Livreurs -->
  <div class="card bg-base-100 shadow-lg mb-6">
    <div class="card-body">
      <div class="flex justify-between items-center mb-4">
        <h2 class="card-title">üöö Livreurs</h2>
        <button class="btn btn-primary btn-sm" onclick="openAddEmployeModal('livreur')">
          + Ajouter un livreur
        </button>
      </div>
      <div class="space-y-2" id="livreursContainer">
        <!-- Rempli par JS -->
      </div>
    </div>
  </div>

  <!-- Caissiers -->
  <div class="card bg-base-100 shadow-lg">
      <div class="card-body">
        <div class="flex justify-between items-center mb-4">
         <h2 class="card-title">üí∞ Caissiers</h2>
          <button class="btn btn-primary btn-sm" onclick="openAddEmployeModal('caissier')">
            + Ajouter un caissier
          </button>
        </div>
        <div class="alert alert-info mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span class="text-sm">Interface caisse en d√©veloppement</span>
        </div>
        <div class="space-y-2" id="caissiersContainer">
          <!-- Rempli par JS -->
        </div>
      </div>
    </div>
  </div>

    <!-- Section Th√®me -->
    <div id="sectionTheme" class="hidden">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">Apparence & Th√®me</h2>
          <div class="form-control">
            <label class="label"><span class="label-text">Th√®me DaisyUI</span></label>
            <select id="themeDaisy" class="select select-bordered">
              <option value="light">Light</option>
              <option value="dark">Dark</option>
              <option value="cupcake">Cupcake</option>
              <option value="bumblebee">Bumblebee</option>
              <option value="emerald">Emerald</option>
              <option value="corporate">Corporate</option>
              <option value="synthwave">Synthwave</option>
              <option value="retro">Retro</option>
              <option value="cyberpunk">Cyberpunk</option>
              <option value="valentine">Valentine</option>
              <option value="halloween">Halloween</option>
              <option value="garden">Garden</option>
              <option value="forest">Forest</option>
              <option value="aqua">Aqua</option>
              <option value="lofi">Lofi</option>
              <option value="pastel">Pastel</option>
              <option value="fantasy">Fantasy</option>
              <option value="wireframe">Wireframe</option>
              <option value="black">Black</option>
              <option value="luxury">Luxury</option>
              <option value="dracula">Dracula</option>
              <option value="cmyk">CMYK</option>
              <option value="autumn">Autumn</option>
              <option value="business">Business</option>
              <option value="acid">Acid</option>
              <option value="lemonade">Lemonade</option>
              <option value="night">Night</option>
              <option value="coffee">Coffee</option>
              <option value="winter">Winter</option>
              <option value="dim">Dim</option>
              <option value="nord">Nord</option>
              <option value="sunset">Sunset</option>
              <option value="caramellatte">Caramellatte</option>
              <option value="abyss">Abyss</option>
              <option value="silk">Silk</option>
            </select>
          </div>

          <div class="form-control mt-4">
            <label class="label"><span class="label-text">Logo (upload)</span></label>
            <input type="file" id="logoUpload" class="file-input file-input-bordered" accept="image/*" />
            <div class="mt-2">
              <img id="logoPreview" class="w-24 h-24 object-cover rounded" />
            </div>
          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="saveThemeBtn">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Section S√©curit√© -->
    <div id="sectionSecurite" class="hidden">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body">
          <h2 class="card-title">S√©curit√© & Acc√®s</h2>
          
          <div class="alert alert-warning mb-4">
            <span>‚ö†Ô∏è Le changement de mot de passe vous d√©connectera</span>
          </div>

          <div class="form-control">
            <label class="label"><span class="label-text">Nom d'utilisateur</span></label>
            <input type="text" id="username" class="input input-bordered" />
          </div>

          <div class="form-control mt-4">
            <label class="label"><span class="label-text">Nouveau mot de passe</span></label>
            <input type="password" id="newPassword" class="input input-bordered" />
          </div>

          <div class="form-control mt-4">
            <label class="label"><span class="label-text">Confirmer le mot de passe</span></label>
            <input type="password" id="confirmPassword" class="input input-bordered" />
          </div>

          <div class="card-actions justify-end mt-4">
            <button class="btn btn-primary" id="saveSecuriteBtn">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>

  </div>

  <!-- Modal Employ√© -->
<dialog id="employeModal" class="modal">
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">‚úï</button>
    </form>
    
    <h3 class="font-bold text-lg mb-4" id="employeModalTitle">Ajouter un employ√©</h3>
    
    <div class="space-y-4">
      <div class="form-control">
        <label class="label"><span class="label-text">Nom complet</span></label>
        <input type="text" id="employeNom" class="input input-bordered" placeholder="John Doe" />
      </div>

      <div class="form-control">
        <label class="label"><span class="label-text">Identifiant</span></label>
        <input type="text" id="employeUsername" class="input input-bordered" placeholder="john" />
      </div>

      <div class="form-control">
        <label class="label"><span class="label-text">Mot de passe</span></label>
        <input type="password" id="employePassword" class="input input-bordered" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
      </div>
    </div>

    <div class="modal-action">
      <button class="btn" onclick="employeModal.close()">Annuler</button>
      <button class="btn btn-primary" id="saveEmployeBtn">Enregistrer</button>
    </div>
  </div>
</dialog>

</AdminLayout>

<script define:vars={{ RESTAURANT_ID }}>
  let configData = {};
  const JOURS = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];

  async function loadConfig() {
    try {
      const response = await fetch(`https://api.cmdola.be/api/$config`);
      configData = await response.json();
      populateAllSections();
      document.getElementById('loader').classList.add('hidden');
      document.getElementById('configContent').classList.remove('hidden');
    } catch (error) {
      console.error('Erreur chargement config:', error);
    }
  }

  function populateAllSections() {
    populateInfos();
    populateHoraires();
    populateServices();
    populatePaiements();
    renderEmployes();
    populateTheme();
    populateSecurite();
  }

  function populateInfos() {
    document.getElementById('restaurantId').value = configData.restaurant_id || RESTAURANT_ID;
    document.getElementById('nom').value = configData.nom || '';
    document.getElementById('telephone').value = configData.telephone || '';
    document.getElementById('email').value = configData.email || '';
    document.getElementById('description').value = configData.description || '';
    document.getElementById('adresse').value = configData.adresse || '';
    document.getElementById('instagram').value = configData.reseaux_sociaux?.instagram || '';
    document.getElementById('facebook').value = configData.reseaux_sociaux?.facebook || '';
  }

  function populateHoraires() {
    const container = document.getElementById('horairesContainer');
    container.innerHTML = JOURS.map(jour => {
      const horairesJour = configData.horaires?.[jour] || [];
      return `
        <div class="card bg-base-200 p-4">
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-bold capitalize">${jour}</h3>
            <button class="btn btn-xs btn-ghost add-horaire-btn" data-jour="${jour}">+ Ajouter</button>
          </div>
          <div class="space-y-2" id="horaires-${jour}">
            ${horairesJour.map((h, i) => `
              <div class="flex gap-2 items-center">
                <input type="time" value="${h.debut}" class="input input-sm input-bordered" data-jour="${jour}" data-index="${i}" data-field="debut" />
                <span>-</span>
                <input type="time" value="${h.fin}" class="input input-sm input-bordered" data-jour="${jour}" data-index="${i}" data-field="fin" />
                <button class="btn btn-xs btn-ghost remove-horaire-btn" data-jour="${jour}" data-index="${i}">üóëÔ∏è</button>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }).join('');

    attachHorairesListeners();
  }

  function attachHorairesListeners() {
    document.querySelectorAll('.add-horaire-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const jour = btn.dataset.jour;
        if (!configData.horaires) configData.horaires = {};
        if (!configData.horaires[jour]) configData.horaires[jour] = [];
        configData.horaires[jour].push({ debut: '09:00', fin: '18:00' });
        populateHoraires();
      });
    });

    document.querySelectorAll('.remove-horaire-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const { jour, index } = btn.dataset;
        configData.horaires[jour].splice(parseInt(index), 1);
        populateHoraires();
      });
    });

    document.querySelectorAll('input[data-jour]').forEach(input => {
      input.addEventListener('change', (e) => {
        const { jour, index, field } = e.target.dataset;
        configData.horaires[jour][parseInt(index)][field] = e.target.value;
      });
    });
  }

  function populateServices() {
    const defaultServices = {
      sur_place: { active: true, label: 'Sur place', icon: 'üçΩÔ∏è', description: 'D√©gustez sur place' },
      emporter: { active: true, label: '√Ä emporter', icon: 'ü•°', description: 'Commande √† emporter' },
      livraison: { active: true, label: 'Livraison', icon: 'üöö', description: 'Livraison √† domicile' }
    };

    const services = configData.modes_service || defaultServices;
    const container = document.getElementById('modesServiceContainer');
    
    container.innerHTML = Object.entries(services).map(([key, service]) => `
      <div class="card bg-base-200 p-4">
        <div class="flex items-center gap-4">
          <input type="checkbox" class="checkbox" id="service-${key}" ${service.active ? 'checked' : ''} />
          <div class="flex-1">
            <div class="flex items-center gap-2">
              <input type="text" value="${service.icon}" class="input input-sm w-16 text-center" id="service-icon-${key}" />
              <input type="text" value="${service.label}" class="input input-sm flex-1" id="service-label-${key}" />
            </div>
            <input type="text" value="${service.description || ''}" class="input input-sm w-full mt-2" placeholder="Description" id="service-desc-${key}" />
          </div>
        </div>
      </div>
    `).join('');

    const zonesContainer = document.getElementById('zonesContainer');
    const zones = configData.zones_livraison || [];
    
    zonesContainer.innerHTML = zones.map((zone, i) => `
      <div class="card bg-base-200 p-4">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-2">
          <input type="text" value="${zone.nom}" class="input input-sm" placeholder="Nom" data-zone="${i}" data-field="nom" />
          <input type="text" value="${zone.codes_postaux?.join(', ') || ''}" class="input input-sm" placeholder="CP (s√©par√©s par ,)" data-zone="${i}" data-field="codes_postaux" />
          <input type="number" step="0.01" value="${zone.frais}" class="input input-sm" placeholder="Frais" data-zone="${i}" data-field="frais" />
          <div class="flex gap-1">
            <input type="text" value="${zone.temps_estime || ''}" class="input input-sm flex-1" placeholder="Temps" data-zone="${i}" data-field="temps_estime" />
            <button class="btn btn-sm btn-ghost remove-zone-btn" data-zone="${i}">üóëÔ∏è</button>
          </div>
        </div>
      </div>
    `).join('');

    document.getElementById('addZoneBtn').addEventListener('click', () => {
      if (!configData.zones_livraison) configData.zones_livraison = [];
      configData.zones_livraison.push({
        id: `zone${Date.now()}`,
        nom: 'Nouvelle zone',
        codes_postaux: [],
        frais: 0,
        temps_estime: '30-45 min'
      });
      populateServices();
    });

    document.querySelectorAll('.remove-zone-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const index = parseInt(btn.dataset.zone);
        configData.zones_livraison.splice(index, 1);
        populateServices();
      });
    });

    document.querySelectorAll('input[data-zone]').forEach(input => {
      input.addEventListener('change', (e) => {
        const { zone, field } = e.target.dataset;
        const index = parseInt(zone);
        let value = e.target.value;
        
        if (field === 'codes_postaux') {
          value = value.split(',').map(s => s.trim()).filter(s => s);
        } else if (field === 'frais') {
          value = parseFloat(value);
        }
        
        configData.zones_livraison[index][field] = value;
      });
    });
  }

  function populatePaiements() {
    const defaultPaiements = {
      comptoir: { active: true, label: 'Au comptoir', icon: 'üíµ' },
      reception: { active: true, label: '√Ä la r√©ception', icon: 'üí∞' },
      en_ligne: { active: false, label: 'En ligne', icon: 'üí≥' }
    };

    const paiements = configData.methodes_paiement || defaultPaiements;
    const container = document.getElementById('paiementsContainer');
    
    container.innerHTML = Object.entries(paiements).map(([key, method]) => `
      <div class="card bg-base-200 p-4">
        <div class="flex items-center gap-4">
          <input type="checkbox" class="checkbox" id="paiement-${key}" ${method.active ? 'checked' : ''} />
          <div class="flex-1 flex items-center gap-2">
            <input type="text" value="${method.icon}" class="input input-sm w-16 text-center" id="paiement-icon-${key}" />
            <input type="text" value="${method.label}" class="input input-sm flex-1" id="paiement-label-${key}" />
          </div>
        </div>
      </div>
    `).join('');
  }

  function populateTheme() {
    document.getElementById('themeDaisy').value = configData.theme?.daisy || 'autumn';
    
    if (configData.theme?.logo) {
      const logoUrl = `https://api.cmdola.be/api/images/$${configData.theme.logo}`;
      document.getElementById('logoPreview').src = logoUrl;
    }
  }

  function populateSecurite() {
    document.getElementById('username').value = configData.admin?.username || 'admin';
  }

  async function saveConfig(section) {
    try {
      const response = await fetch(`https://api.cmdola.be/api/$config`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(configData)
      });

      if (response.ok) {
        alert('Configuration enregistr√©e avec succ√®s');
        if (section === 'securite') {
          localStorage.removeItem('admin_token');
          document.cookie = 'admin_token=; path=/; max-age=0';
          window.location.href = '/admin';
        }
      } else {
        throw new Error('Erreur sauvegarde');
      }
    } catch (error) {
      console.error('Erreur:', error);
      alert('Erreur lors de la sauvegarde');
    }
  }

  document.getElementById('saveInfosBtn').addEventListener('click', () => {
    configData.nom = document.getElementById('nom').value;
    configData.telephone = document.getElementById('telephone').value;
    configData.email = document.getElementById('email').value;
    configData.description = document.getElementById('description').value;
    configData.adresse = document.getElementById('adresse').value;
    
    if (!configData.reseaux_sociaux) configData.reseaux_sociaux = {};
    configData.reseaux_sociaux.instagram = document.getElementById('instagram').value;
    configData.reseaux_sociaux.facebook = document.getElementById('facebook').value;
    
    saveConfig('infos');
  });

  document.getElementById('saveHorairesBtn').addEventListener('click', () => {
    saveConfig('horaires');
  });

  document.getElementById('saveServicesBtn').addEventListener('click', () => {
    if (!configData.modes_service) configData.modes_service = {};
    
    ['sur_place', 'emporter', 'livraison'].forEach(key => {
      configData.modes_service[key] = {
        active: document.getElementById(`service-${key}`).checked,
        label: document.getElementById(`service-label-${key}`).value,
        icon: document.getElementById(`service-icon-${key}`).value,
        description: document.getElementById(`service-desc-${key}`).value
      };
    });
    
    saveConfig('services');
  });

  document.getElementById('savePaiementsBtn').addEventListener('click', () => {
    if (!configData.methodes_paiement) configData.methodes_paiement = {};
    
    ['comptoir', 'reception', 'en_ligne'].forEach(key => {
      configData.methodes_paiement[key] = {
        active: document.getElementById(`paiement-${key}`).checked,
        label: document.getElementById(`paiement-label-${key}`).value,
        icon: document.getElementById(`paiement-icon-${key}`).value
      };
    });
    
    saveConfig('paiements');
  });

  document.getElementById('saveThemeBtn').addEventListener('click', async () => {
    if (!configData.theme) configData.theme = {};
    configData.theme.daisy = document.getElementById('themeDaisy').value;
    
    const logoFile = document.getElementById('logoUpload').files[0];
    if (logoFile) {
      const formData = new FormData();
      formData.append('image', logoFile);
      
      try {
        const uploadResponse = await fetch(`https://api.cmdola.be/api/$upload-image`, {
          method: 'POST',
          body: formData
        });
        const uploadData = await uploadResponse.json();
        configData.theme.logo = uploadData.filename;
      } catch (error) {
        console.error('Erreur upload logo:', error);
      }
    }
    
    saveConfig('theme');
  });

  document.getElementById('saveSecuriteBtn').addEventListener('click', () => {
    const newPass = document.getElementById('newPassword').value;
    const confirmPass = document.getElementById('confirmPassword').value;
    
    if (newPass && newPass !== confirmPass) {
      alert('Les mots de passe ne correspondent pas');
      return;
    }
    
    if (!configData.admin) configData.admin = {};
    configData.admin.username = document.getElementById('username').value;
    
    if (newPass) {
      configData.admin.password = newPass;
    }
    
    saveConfig('securite');
  });

  // Tabs navigation
  // Tabs navigation
const tabs = ['Infos', 'Horaires', 'Services', 'Paiements', 'Employes', 'Theme', 'Securite'];
tabs.forEach(tab => {
  document.getElementById(`tab${tab}`).addEventListener('click', () => {
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('tab-active'));
    document.getElementById(`tab${tab}`).classList.add('tab-active');
    
    tabs.forEach(t => {
      document.getElementById(`section${t}`).classList.add('hidden');
    });
    document.getElementById(`section${tab}`).classList.remove('hidden');
  });
});

let currentEmployeType = null;
let currentEmployeId = null;

// Render employ√©s
function renderEmployes() {
  renderChefs();
  renderLivreurs();
  renderCaissiers();
}

function renderChefs() {
  const container = document.getElementById('chefsContainer');
  const chefs = configData.chefs || {};
  
  if (Object.keys(chefs).length === 0) {
    container.innerHTML = '<p class="text-base-content/60 text-center py-4">Aucun chef</p>';
    return;
  }

  container.innerHTML = Object.entries(chefs).map(([id, chef]) => `
    <div class="card bg-base-200">
      <div class="card-body p-4">
        <div class="flex justify-between items-center">
          <div>
            <div class="font-bold">${chef.nom || chef.username}</div>
            <div class="text-sm text-base-content/60">@${chef.username}</div>
          </div>
          <div class="flex gap-2">
            <button class="btn btn-sm btn-ghost" onclick="editEmploye('chef', '${id}')">‚úèÔ∏è</button>
            <button class="btn btn-sm btn-ghost text-error" onclick="deleteEmploye('chef', '${id}')">üóëÔ∏è</button>
          </div>
        </div>
      </div>
    </div>
  `).join('');
}

function renderLivreurs() {
  const container = document.getElementById('livreursContainer');
  const livreurs = configData.livreurs || {};
  
  if (Object.keys(livreurs).length === 0) {
    container.innerHTML = '<p class="text-base-content/60 text-center py-4">Aucun livreur</p>';
    return;
  }

  container.innerHTML = Object.entries(livreurs).map(([id, livreur]) => `
    <div class="card bg-base-200">
      <div class="card-body p-4">
        <div class="flex justify-between items-center">
          <div>
            <div class="font-bold">${livreur.nom || livreur.username}</div>
            <div class="text-sm text-base-content/60">@${livreur.username}</div>
          </div>
          <div class="flex gap-2">
            <button class="btn btn-sm btn-ghost" onclick="editEmploye('livreur', '${id}')">‚úèÔ∏è</button>
            <button class="btn btn-sm btn-ghost text-error" onclick="deleteEmploye('livreur', '${id}')">üóëÔ∏è</button>
          </div>
        </div>
      </div>
    </div>
  `).join('');
}

function renderCaissiers() {
  const container = document.getElementById('caissiersContainer');
  const caissiers = configData.caissiers || {};
  
  if (Object.keys(caissiers).length === 0) {
    container.innerHTML = '<p class="text-base-content/60 text-center py-4">Aucun caissier</p>';
    return;
  }

  container.innerHTML = Object.entries(caissiers).map(([id, caissier]) => `
    <div class="card bg-base-200">
      <div class="card-body p-4">
        <div class="flex justify-between items-center">
          <div>
            <div class="font-bold">${caissier.nom || caissier.username}</div>
            <div class="text-sm text-base-content/60">@${caissier.username}</div>
          </div>
          <div class="flex gap-2">
            <button class="btn btn-sm btn-ghost text-error" onclick="deleteEmploye('caissier', '${id}')">üóëÔ∏è</button>
          </div>
        </div>
      </div>
    </div>
  `).join('');
}

// Ouvrir modal ajout
window.openAddEmployeModal = function(type) {
  currentEmployeType = type;
  currentEmployeId = null;
  
  const titles = {
    'chef': 'Ajouter un chef',
    'livreur': 'Ajouter un livreur',
    'caissier': 'Ajouter un caissier'
  };
  
  document.getElementById('employeModalTitle').textContent = titles[type];
  document.getElementById('employeNom').value = '';
  document.getElementById('employeUsername').value = '';
  document.getElementById('employePassword').value = '';
  
  employeModal.showModal();
};

// √âditer employ√©
window.editEmploye = function(type, id) {
  currentEmployeType = type;
  currentEmployeId = id;
  
  const pluralTypes = { 'chef': 'chefs', 'livreur': 'livreurs', 'caissier': 'caissiers' };
  const employe = configData[pluralTypes[type]][id];
  
  const titles = {
    'chef': 'Modifier le chef',
    'livreur': 'Modifier le livreur',
    'caissier': 'Modifier le caissier'
  };
  
  document.getElementById('employeModalTitle').textContent = titles[type];
  document.getElementById('employeNom').value = employe.nom || '';
  document.getElementById('employeUsername').value = employe.username || '';
  document.getElementById('employePassword').value = ''; // Ne pas afficher l'ancien mdp
  
  employeModal.showModal();
};

// Supprimer employ√©
window.deleteEmploye = async function(type, id) {
  const pluralTypes = { 'chef': 'chefs', 'livreur': 'livreurs', 'caissier': 'caissiers' };
  const employe = configData[pluralTypes[type]][id];
  
  if (!confirm(`Supprimer ${employe.nom || employe.username} ?`)) return;
  
  delete configData[pluralTypes[type]][id];
  
  try {
    await fetch(`https://api.cmdola.be/api/$config`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(configData)
    });
    
    renderEmployes();
    alert('Employ√© supprim√©');
  } catch (error) {
    console.error('Erreur suppression:', error);
    alert('Erreur lors de la suppression');
  }
};

// Sauvegarder employ√©
document.getElementById('saveEmployeBtn').addEventListener('click', async () => {
  const nom = document.getElementById('employeNom').value.trim();
  const username = document.getElementById('employeUsername').value.trim();
  const password = document.getElementById('employePassword').value;
  
  if (!nom || !username) {
    alert('Nom et identifiant sont obligatoires');
    return;
  }
  
  if (!currentEmployeId && !password) {
    alert('Mot de passe obligatoire pour un nouvel employ√©');
    return;
  }
  
  const pluralTypes = { 'chef': 'chefs', 'livreur': 'livreurs', 'caissier': 'caissiers' };
  const typeKey = pluralTypes[currentEmployeType];
  
  if (!configData[typeKey]) configData[typeKey] = {};
  
  // G√©n√©rer ID si nouveau
  const employeId = currentEmployeId || `${currentEmployeType}${Date.now()}`;
  
  // Cr√©er/modifier employ√©
  configData[typeKey][employeId] = {
    nom: nom,
    username: username,
    ...(password && { password: password }), // Ne change le mdp que s'il est fourni
    ...(configData[typeKey][employeId]?.password && !password && { password: configData[typeKey][employeId].password }) // Garde l'ancien si vide
  };
  
  try {
    await fetch(`https://api.cmdola.be/api/$config`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(configData)
    });
    
    employeModal.close();
    renderEmployes();
    alert('Employ√© enregistr√©');
  } catch (error) {
    console.error('Erreur sauvegarde:', error);
    alert('Erreur lors de la sauvegarde');
  }
});

  
  loadConfig();
</script>