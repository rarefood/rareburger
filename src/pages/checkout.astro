---
// src/pages/checkout.astro
// ============================================
// üí≥ CMDOLA - Page Checkout
// ============================================

import Navbar from '../components/Navbar.astro';
import { api } from '../lib/api';
import '../assets/app.css';

// R√©cup√©rer la config du restaurant
let config: any = {};
try {
  config = await api.config.get();
} catch (error) {
  console.error('Erreur config:', error);
}

const restaurantId = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';
const apiBaseUrl = import.meta.env.PUBLIC_API_URL || 'https://api.cmdola.be/api';
const modesService = config?.modes_service || {};
const zonesFraisLivraison = config?.zones_livraison || [];
const methodesPaiement = config?.methodes_paiement || {};
---

<!DOCTYPE html>
<html lang="fr" data-theme="autumn">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
</head>

<body class="bg-base-200 min-h-screen">
  
  <Navbar />
  
  <div class="container mx-auto px-4 py-8">
    
    <!-- Titre -->
    <h1 class="text-3xl font-bold mb-6">Finaliser la commande</h1>

    <div class="grid lg:grid-cols-3 gap-6">
      
      <!-- Formulaire (2/3) -->
      <div class="lg:col-span-2">
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            
            <!-- Steps indicator -->
            <ul class="steps steps-horizontal w-full mb-8">
              <li id="step-indicator-1" class="step step-primary">Mode</li>
              <li id="step-indicator-2" class="step">Informations</li>
              <li id="step-indicator-3" class="step">Paiement</li>
            </ul>

            <!-- √âtape 1 : Choix du mode de service -->
            <div id="step-1" class="step-content">
              <h2 class="text-xl font-bold mb-4">Comment souhaitez-vous recevoir votre commande ?</h2>
              
              <div class="grid gap-4">
                {modesService.sur_place?.active && (
                  <label class="card card-compact bg-base-100 border-2 border-base-300 cursor-pointer hover:border-primary transition-colors">
                    <div class="card-body">
                      <div class="flex items-center gap-4">
                        <input type="radio" name="mode_service" value="sur_place" class="radio radio-primary" />
                        <div class="flex-1">
                          <div class="flex items-center gap-2">
                            <span class="text-2xl">{modesService.sur_place.icon}</span>
                            <h3 class="font-bold">{modesService.sur_place.label}</h3>
                          </div>
                          <p class="text-sm text-base-content/70">{modesService.sur_place.description}</p>
                        </div>
                      </div>
                    </div>
                  </label>
                )}

                {modesService.emporter?.active && (
                  <label class="card card-compact bg-base-100 border-2 border-base-300 cursor-pointer hover:border-primary transition-colors">
                    <div class="card-body">
                      <div class="flex items-center gap-4">
                        <input type="radio" name="mode_service" value="emporter" class="radio radio-primary" />
                        <div class="flex-1">
                          <div class="flex items-center gap-2">
                            <span class="text-2xl">{modesService.emporter.icon}</span>
                            <h3 class="font-bold">{modesService.emporter.label}</h3>
                          </div>
                          <p class="text-sm text-base-content/70">{modesService.emporter.description}</p>
                          {modesService.emporter.delai_preparation && (
                            <p class="text-sm text-info mt-1">‚è±Ô∏è {modesService.emporter.delai_preparation}</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </label>
                )}

                {modesService.livraison?.active && (
                  <label class="card card-compact bg-base-100 border-2 border-base-300 cursor-pointer hover:border-primary transition-colors">
                    <div class="card-body">
                      <div class="flex items-center gap-4">
                        <input type="radio" name="mode_service" value="livraison" class="radio radio-primary" />
                        <div class="flex-1">
                          <div class="flex items-center gap-2">
                            <span class="text-2xl">{modesService.livraison.icon}</span>
                            <h3 class="font-bold">{modesService.livraison.label}</h3>
                          </div>
                          <p class="text-sm text-base-content/70">{modesService.livraison.description}</p>
                        </div>
                      </div>
                    </div>
                  </label>
                )}
              </div>

              <div class="flex justify-end mt-6">
                <button id="btn-next-step-1" class="btn btn-primary" disabled>
                  Continuer
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>

            <!-- √âtape 2 : Informations client -->
            <div id="step-2" class="step-content" style="display: none;">
              <h2 class="text-xl font-bold mb-4">Vos informations</h2>
              
              <form id="form-client" class="space-y-4">
                
                <!-- Infos de base (tous modes) -->
                <div class="grid md:grid-cols-2 gap-4">
                  <div class="form-control">
                    <label class="label"><span class="label-text">Pr√©nom *</span></label>
                    <input type="text" name="prenom" class="input input-bordered" required />
                  </div>
                  <div class="form-control">
                    <label class="label"><span class="label-text">Nom *</span></label>
                    <input type="text" name="nom" class="input input-bordered" required />
                  </div>
                </div>

                <div class="grid md:grid-cols-2 gap-4">
                  <div class="form-control">
                    <label class="label"><span class="label-text">T√©l√©phone *</span></label>
                    <input type="tel" name="telephone" class="input input-bordered" required />
                  </div>
                  <div class="form-control">
                    <label class="label"><span class="label-text">Email *</span></label>
                    <input type="email" name="email" class="input input-bordered" required />
                  </div>
                </div>

                <!-- Heure souhait√©e (pour √† emporter) -->
                <div id="heure-souhaitee-field" style="display: none;">
                  <div class="form-control">
                    <label class="label"><span class="label-text">Heure de retrait souhait√©e</span></label>
                    <input type="time" name="heure_souhaitee" class="input input-bordered" />
                  </div>
                </div>

                <!-- Num√©ro de table (pour sur place) -->
                <div id="table-field" style="display: none;">
                  <div class="form-control">
                    <label class="label"><span class="label-text">Num√©ro de table</span></label>
                    <input type="text" name="numero_table" class="input input-bordered" placeholder="Ex: 12" />
                  </div>
                </div>

                <!-- Adresse (seulement si livraison) -->
                <div id="adresse-fields" style="display: none;">
                  <div class="divider">Adresse de livraison</div>
                  
                  <div class="grid md:grid-cols-3 gap-4">
                    <div class="form-control md:col-span-2">
                      <label class="label"><span class="label-text">Rue *</span></label>
                      <input type="text" name="rue" class="input input-bordered" />
                    </div>
                    <div class="form-control">
                      <label class="label"><span class="label-text">Num√©ro *</span></label>
                      <input type="text" name="numero" class="input input-bordered" />
                    </div>
                  </div>

                  <div class="grid md:grid-cols-2 gap-4 mt-4">
                    <div class="form-control">
                      <label class="label"><span class="label-text">Code postal *</span></label>
                      <input type="text" name="code_postal" id="code-postal-input" class="input input-bordered" />
                      <label class="label">
                        <span id="zone-info" class="label-text-alt"></span>
                      </label>
                    </div>
                    <div class="form-control">
                      <label class="label"><span class="label-text">Ville *</span></label>
                      <input type="text" name="ville" class="input input-bordered" />
                    </div>
                  </div>
                </div>

                <!-- Notes optionnelles -->
                <div class="form-control">
                  <label class="label"><span class="label-text">Commentaires (optionnel)</span></label>
                  <textarea name="notes" class="textarea textarea-bordered" rows="3" placeholder="Instructions de livraison, allergies..."></textarea>
                </div>

              </form>

              <div class="flex justify-between mt-6">
                <button id="btn-back-step-2" class="btn btn-ghost">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                  Retour
                </button>
                <button id="btn-next-step-2" class="btn btn-primary">
                  Continuer
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>

            <!-- √âtape 3 : Paiement -->
            <div id="step-3" class="step-content" style="display: none;">
              <h2 class="text-xl font-bold mb-4">Mode de paiement</h2>
              
              <div id="payment-methods" class="grid gap-4">
                <!-- Rempli dynamiquement -->
              </div>

              <div class="flex justify-between mt-6">
                <button id="btn-back-step-3" class="btn btn-ghost">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                  Retour
                </button>
                <button id="btn-confirm-order" class="btn btn-primary" disabled>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Confirmer la commande
                </button>
              </div>
            </div>

          </div>
        </div>
      </div>

      <!-- R√©sum√© commande (1/3) -->
      <div class="lg:col-span-1">
        <div class="card bg-base-100 shadow-sm sticky top-4">
          <div class="card-body">
            <h2 class="card-title">R√©capitulatif</h2>
            <div class="divider my-2"></div>
            
            <!-- Liste des articles -->
            <div id="summary-items-list" class="space-y-2 mb-4 max-h-64 overflow-y-auto">
              <!-- Rempli par JS -->
            </div>
            
            <div class="divider my-2"></div>
            
            <div class="space-y-3">
              <div class="flex justify-between">
                <span>Sous-total (<span id="summary-items-count">0</span> articles)</span>
                <span id="summary-subtotal" class="font-semibold">0.00‚Ç¨</span>
              </div>
              
              <div id="summary-delivery-row" class="flex justify-between" style="display: none;">
                <span id="summary-delivery-label">Frais</span>
                <span id="summary-delivery-fees" class="font-semibold">0.00‚Ç¨</span>
              </div>
              
              <div class="divider my-2"></div>
              
              <div class="flex justify-between text-lg">
                <span class="font-bold">Total</span>
                <span id="summary-total" class="font-bold text-primary">0.00‚Ç¨</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="toast-container" class="toast toast-top toast-end z-50"></div>

</body>
</html>

<script define:vars={{ modesService, zonesFraisLivraison, methodesPaiement, restaurantId, apiBaseUrl }}>
  // Charger le th√®me et logo dynamiquement
  async function loadConfig() {
    try {
      const response = await fetch(`https://api.cmdola.be/api/${restaurantId}/config`);
      const config = await response.json();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = `https://api.cmdola.be/api/images/${restaurantId}/${config.theme.logo}`;
        const favicon = document.getElementById('favicon');
        if (favicon) favicon.href = logoUrl;
      }
    } catch (error) {
      console.error('Erreur config:', error);
    }
  }

  loadConfig();

  // √âtat global
  let currentStep = 1;
  let selectedMode = '';
  let selectedZone = null;
  let selectedPaymentMethod = '';
  let cart = [];

  // Formater prix
  function formatPrice(price) {
    return new Intl.NumberFormat('fr-BE', {
      style: 'currency',
      currency: 'EUR',
    }).format(price);
  }

  // Charger panier
  function loadCart() {
    cart = JSON.parse(localStorage.getItem('cart') || '[]');
    console.log('Panier charg√©:', cart.length, 'articles', cart);
    
    if (cart.length === 0) {
      alert('Votre panier est vide');
      window.location.href = '/cart';
      return;
    }
    updateSummary();
  }

  // Mettre √† jour le r√©sum√©
  function updateSummary() {
    const subtotal = cart.reduce((sum, item) => sum + (item.prix * item.quantite), 0);
    const itemsCount = cart.reduce((sum, item) => sum + item.quantite, 0);
    
    // Afficher la liste des articles
    const itemsList = document.getElementById('summary-items-list');
    itemsList.innerHTML = cart.map(item => `
      <div class="flex justify-between text-sm">
        <span>${item.quantite}x ${item.nom}</span>
        <span class="font-semibold">${formatPrice(item.prix * item.quantite)}</span>
      </div>
    `).join('');
    
    document.getElementById('summary-items-count').textContent = itemsCount;
    document.getElementById('summary-subtotal').textContent = formatPrice(subtotal);
    
    let deliveryFees = 0;
    if (selectedMode === 'livraison' && selectedZone) {
      deliveryFees = selectedZone.frais;
      document.getElementById('summary-delivery-row').style.display = 'flex';
      document.getElementById('summary-delivery-label').textContent = `Livraison (${selectedZone.nom})`;
      document.getElementById('summary-delivery-fees').textContent = formatPrice(deliveryFees);
    } else {
      document.getElementById('summary-delivery-row').style.display = 'none';
    }
    
    const total = subtotal + deliveryFees;
    document.getElementById('summary-total').textContent = formatPrice(total);
  }

  // Navigation entre √©tapes
  function showStep(step) {
    // Masquer toutes les √©tapes
    document.querySelectorAll('.step-content').forEach(el => el.style.display = 'none');
    
    // Afficher l'√©tape demand√©e
    document.getElementById(`step-${step}`).style.display = 'block';
    
    // Mettre √† jour les indicateurs
    for (let i = 1; i <= 3; i++) {
      const indicator = document.getElementById(`step-indicator-${i}`);
      if (i < step) {
        indicator.classList.add('step-primary');
      } else if (i === step) {
        indicator.classList.add('step-primary');
      } else {
        indicator.classList.remove('step-primary');
      }
    }
    
    currentStep = step;
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  // √âtape 1 : Choix du mode
  document.querySelectorAll('input[name="mode_service"]').forEach(radio => {
    radio.addEventListener('change', (e) => {
      selectedMode = e.target.value;
      document.getElementById('btn-next-step-1').disabled = false;
    });
  });

  document.getElementById('btn-next-step-1').addEventListener('click', () => {
    // Adapter le formulaire selon le mode
    const adresseFields = document.getElementById('adresse-fields');
    const adresseInputs = adresseFields.querySelectorAll('input');
    const heureField = document.getElementById('heure-souhaitee-field');
    const tableField = document.getElementById('table-field');
    
    // Reset
    adresseFields.style.display = 'none';
    heureField.style.display = 'none';
    tableField.style.display = 'none';
    adresseInputs.forEach(input => input.required = false);
    
    if (selectedMode === 'livraison') {
      adresseFields.style.display = 'block';
      adresseInputs.forEach(input => input.required = true);
    } else if (selectedMode === 'emporter') {
      heureField.style.display = 'block';
    } else if (selectedMode === 'sur_place') {
      tableField.style.display = 'block';
    }
    
    showStep(2);
  });

  // Code postal - d√©tection zone
  document.getElementById('code-postal-input')?.addEventListener('input', (e) => {
    const codePostal = e.target.value;
    const zoneInfo = document.getElementById('zone-info');
    
    if (selectedMode !== 'livraison') return;
    
    const zone = zonesFraisLivraison.find(z => z.codes_postaux.includes(codePostal));
    
    if (zone) {
      selectedZone = zone;
      zoneInfo.textContent = `‚úì ${zone.nom} - Frais: ${zone.frais}‚Ç¨ - ${zone.temps_estime}`;
      zoneInfo.classList.remove('text-error');
      zoneInfo.classList.add('text-success');
      updateSummary();
    } else if (codePostal.length >= 4) {
      selectedZone = null;
      zoneInfo.textContent = '‚úó Code postal hors zone de livraison';
      zoneInfo.classList.remove('text-success');
      zoneInfo.classList.add('text-error');
      updateSummary();
    } else {
      zoneInfo.textContent = '';
    }
  });

  // √âtape 2 : Informations
  document.getElementById('btn-back-step-2').addEventListener('click', () => showStep(1));
  
  document.getElementById('btn-next-step-2').addEventListener('click', () => {
    const form = document.getElementById('form-client');
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    
    if (selectedMode === 'livraison' && !selectedZone) {
      alert('Veuillez entrer un code postal valide dans notre zone de livraison');
      return;
    }
    
    // Afficher les m√©thodes de paiement disponibles
    renderPaymentMethods();
    showStep(3);
  });

  // Afficher m√©thodes de paiement selon le mode
  function renderPaymentMethods() {
    const container = document.getElementById('payment-methods');
    container.innerHTML = '';
    
    let availableMethods = [];
    
    if (selectedMode === 'sur_place') {
      if (methodesPaiement.comptoir?.active) availableMethods.push('comptoir');
      if (methodesPaiement.en_ligne?.active) availableMethods.push('en_ligne');
    } else if (selectedMode === 'emporter') {
      if (methodesPaiement.reception?.active) availableMethods.push('reception');
      if (methodesPaiement.en_ligne?.active) availableMethods.push('en_ligne');
    } else if (selectedMode === 'livraison') {
      if (methodesPaiement.reception?.active) availableMethods.push('reception');
      if (methodesPaiement.en_ligne?.active) availableMethods.push('en_ligne');
    }
    
    availableMethods.forEach(method => {
      const methodConfig = methodesPaiement[method];
      const card = document.createElement('label');
      card.className = 'card card-compact bg-base-100 border-2 border-base-300 cursor-pointer hover:border-primary transition-colors';
      card.innerHTML = `
        <div class="card-body">
          <div class="flex items-center gap-4">
            <input type="radio" name="payment_method" value="${method}" class="radio radio-primary" />
            <div class="flex-1">
              <div class="flex items-center gap-2">
                <span class="text-2xl">${methodConfig.icon}</span>
                <h3 class="font-bold">${methodConfig.label}</h3>
              </div>
              <p class="text-sm text-base-content/70">${methodConfig.description}</p>
            </div>
          </div>
        </div>
      `;
      container.appendChild(card);
    });
    
    // √âcouter les changements
    document.querySelectorAll('input[name="payment_method"]').forEach(radio => {
      radio.addEventListener('change', (e) => {
        selectedPaymentMethod = e.target.value;
        document.getElementById('btn-confirm-order').disabled = false;
      });
    });
  }

  // √âtape 3 : Paiement
  document.getElementById('btn-back-step-3').addEventListener('click', () => showStep(2));

  document.getElementById('btn-confirm-order').addEventListener('click', async () => {
    const btn = document.getElementById('btn-confirm-order');
    btn.disabled = true;
    btn.innerHTML = '<span class="loading loading-spinner loading-sm"></span> Envoi en cours...';
    
    try {
      // R√©cup√©rer les valeurs DIRECTEMENT depuis les radio buttons
      const modeRadio = document.querySelector('input[name="mode_service"]:checked');
      const paymentRadio = document.querySelector('input[name="payment_method"]:checked');
      
      if (!modeRadio || !paymentRadio) {
        throw new Error('Informations manquantes');
      }
      
      const finalMode = modeRadio.value;
      const finalPaymentMethod = paymentRadio.value;
      
      // R√©cup√©rer les donn√©es du formulaire
      const formData = new FormData(document.getElementById('form-client'));
      const clientData = Object.fromEntries(formData);
      
      // D√©tecter le type d'appareil
      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
      
      // Pr√©parer la commande
      const orderData = {
        type: finalMode,
        client: {
          nom: clientData.nom,
          prenom: clientData.prenom,
          email: clientData.email,
          telephone: clientData.telephone,
        },
        articles: cart,
        sous_total: cart.reduce((sum, item) => sum + (item.prix * item.quantite), 0),
        notes: clientData.notes || '',
        device_type: isMobile ? 'mobile' : 'desktop',
        source: 'web',
      };
      
      // Ajouter infos selon le mode
      if (finalMode === 'livraison') {
        orderData.client.adresse = {
          rue: clientData.rue,
          numero: clientData.numero,
          code_postal: clientData.code_postal,
          ville: clientData.ville,
        };
        orderData.frais_livraison = selectedZone.frais;
        orderData.zone_livraison = selectedZone.id;
        orderData.temps_estime = selectedZone.temps_estime;
      } else if (finalMode === 'emporter') {
        orderData.frais_livraison = 0;
        orderData.heure_souhaitee = clientData.heure_souhaitee || null;
      } else if (finalMode === 'sur_place') {
        orderData.frais_livraison = 0;
        orderData.numero_table = clientData.numero_table || null;
      }
      
      orderData.prix_total = orderData.sous_total + (orderData.frais_livraison || 0);
      
      // CHANGEMENT ICI : Statut selon le mode de paiement
      if (finalPaymentMethod === 'en_ligne') {
        orderData.paiement = {
          mode: 'en_ligne',
          statut: 'en_attente_paiement',  // ‚Üê Statut sp√©cial pour paiement en attente
        };
      } else {
        orderData.paiement = {
          mode: finalPaymentMethod,
          statut: 'a_reception',
        };
      }
      
      console.log('üì§ Envoi commande:', orderData);
      
      // Envoyer √† l'API
      const response = await fetch(`${apiBaseUrl}/${restaurantId}/commandes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });
      
      if (!response.ok) {
        throw new Error('Erreur lors de l\'envoi de la commande');
      }
      
      const result = await response.json();
      console.log('‚úÖ Commande cr√©√©e:', result);
      
      // Sauvegarder la commande pour la page de confirmation
      localStorage.setItem('last_order', JSON.stringify(result));
      
      // CHANGEMENT ICI : Gestion du panier selon le mode de paiement
      if (finalPaymentMethod === 'en_ligne') {
        // ‚úÖ NE PAS vider le panier pour paiement Stripe
        // Le panier sera vid√© sur la page confirmation apr√®s retour de Stripe
        console.log('üí≥ Paiement en ligne - panier conserv√©');
        window.location.href = '/stripe-checkout?order=' + result.id;
      } else {
        // ‚úÖ Vider le panier pour les autres modes
        localStorage.removeItem('cart');
        window.dispatchEvent(new Event('cart-updated'));
        console.log('‚úÖ Panier vid√©');
        window.location.href = '/confirmation?order=' + result.id;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      alert('Une erreur est survenue lors de l\'envoi de votre commande. Veuillez r√©essayer.');
      btn.disabled = false;
      btn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        Confirmer la commande
      `;
    }
  });

  // Init
  loadCart();
</script>