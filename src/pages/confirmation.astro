---
// src/pages/confirmation.astro
// ============================================
// ‚úÖ CMDOLA - Page Confirmation Commande
// ============================================

import Navbar from '../components/Navbar.astro';
import '../assets/app.css';

const orderId = Astro.url.searchParams.get('order');
const restaurantId = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';
const apiBaseUrl = import.meta.env.PUBLIC_API_URL || 'https://api.rareburger.be/api';
---

<!DOCTYPE html>
<html lang="fr" data-theme="autumn">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Commande confirm√©e - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
</head>

<body class="bg-base-200 min-h-screen">
  
  <Navbar />
  
  <!-- Loading initial -->
  <div id="loading-initial" class="container mx-auto px-4 py-8">
    <div class="flex flex-col items-center justify-center min-h-[60vh]">
      <span class="loading loading-spinner loading-lg text-primary mb-4"></span>
      <h2 class="text-2xl font-bold mb-2">V√©rification de votre commande...</h2>
      <p class="text-base-content/60">Veuillez patienter</p>
    </div>
  </div>
  
  <div id="main-content" class="container mx-auto px-4 py-8" style="display: none;">
    
    <!-- Message de succ√®s -->
    <div class="alert alert-success shadow-lg mb-6">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <div>
        <h3 class="font-bold text-lg">Commande confirm√©e !</h3>
        <div class="text-sm">Merci pour votre commande. Vous recevrez un email de confirmation.</div>
      </div>
    </div>

    <!-- Contenu principal -->
    <div class="grid lg:grid-cols-3 gap-6">
      
      <!-- D√©tails commande -->
      <div class="lg:col-span-2 space-y-6">
        
        <!-- Num√©ro et statut -->
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <div class="flex items-center justify-between">
              <div>
                <h2 class="text-2xl font-bold" id="order-numero">Chargement...</h2>
                <p class="text-base-content/60" id="order-date"></p>
              </div>
              <div class="badge badge-lg badge-primary" id="order-status">Nouvelle</div>
            </div>
          </div>
        </div>

        <!-- Informations client -->
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <h3 class="card-title">Informations</h3>
            <div class="divider my-2"></div>
            
            <div class="grid md:grid-cols-2 gap-4" id="client-info">
              <!-- Rempli par JS -->
            </div>
          </div>
        </div>

        <!-- Articles command√©s -->
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <h3 class="card-title">Votre commande</h3>
            <div class="divider my-2"></div>
            
            <div class="space-y-3" id="order-items">
              <!-- Rempli par JS -->
            </div>
          </div>
        </div>

        <!-- R√©sum√© prix -->
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <div class="space-y-2">
              <div class="flex justify-between">
                <span>Sous-total</span>
                <span id="order-subtotal" class="font-semibold">0.00‚Ç¨</span>
              </div>
              <div class="flex justify-between" id="order-delivery-row" style="display: none;">
                <span id="order-delivery-label">Frais de livraison</span>
                <span id="order-delivery-fees" class="font-semibold">0.00‚Ç¨</span>
              </div>
              <div class="divider my-2"></div>
              <div class="flex justify-between text-lg">
                <span class="font-bold">Total</span>
                <span id="order-total" class="font-bold text-primary">0.00‚Ç¨</span>
              </div>
            </div>
          </div>
        </div>

      </div>

      <!-- Actions -->
      <div class="lg:col-span-1">
        <div class="card bg-base-100 shadow-sm sticky top-4">
          <div class="card-body space-y-4">
            
            <h3 class="card-title">Que faire maintenant ?</h3>
            
            <!-- Suivre la commande -->
            <button id="track-order-btn" class="btn btn-primary btn-block">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                Suivre ma commande
            </button>
            
            <div class="divider">OU</div>
            
            <!-- Retour au menu -->
            <a href="/menu" class="btn btn-outline btn-block">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Retour au menu
            </a>
            
            <!-- Contact -->
            <a href="/contact" class="btn btn-ghost btn-block">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              Nous contacter
            </a>

            <div class="divider"></div>

            <!-- Infos utiles -->
            <div class="alert alert-info">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div class="text-sm">
                <p class="font-semibold">Un email vous a √©t√© envoy√©</p>
                <p>V√©rifiez vos spams si vous ne le recevez pas</p>
              </div>
            </div>

          </div>
        </div>
      </div>

    </div>
  </div>

</body>
</html>

<script define:vars={{ orderId, restaurantId, apiBaseUrl }}>
  // Charger le th√®me et logo dynamiquement
  async function loadConfig() {
    try {
      const response = await fetch(`${apiBaseUrl}/${restaurantId}/config`);
      const config = await response.json();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = `${apiBaseUrl}/images/${restaurantId}/${config.theme.logo}`;
        const favicon = document.getElementById('favicon');
        if (favicon) favicon.href = logoUrl;
      }
    } catch (error) {
      console.error('Erreur config:', error);
    }
  }

  loadConfig();

  // Formater prix
  function formatPrice(price) {
    return new Intl.NumberFormat('fr-BE', {
      style: 'currency',
      currency: 'EUR',
    }).format(price);
  }

  // Formater date
  function formatDate(isoDate) {
    const date = new Date(isoDate);
    return new Intl.DateTimeFormat('fr-BE', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    }).format(date);
  }

  // Traduction des statuts
  const statusLabels = {
    'nouvelle': 'Nouvelle',
    'en_preparation': 'En pr√©paration',
    'prete': 'Pr√™te',
    'en_livraison': 'En livraison',
    'livree': 'Livr√©e',
    'terminee': 'Termin√©e',
    'annulee': 'Annul√©e'
  };
  
// Charger la commande avec retry pour attendre le webhook
async function loadOrder(retryCount = 0) {
  const MAX_RETRIES = 10; // 10 tentatives = ~5 secondes
  const RETRY_DELAY = 500; // 500ms entre chaque tentative
  
  let order = null;

  // ‚úÖ TOUJOURS fetch depuis l'API pour les v√©rifications de paiement
  if (orderId) {
    try {
      const response = await fetch(`${apiBaseUrl}/${restaurantId}/commandes/${orderId}`);
      if (response.ok) {
        order = await response.json();
        console.log('üì° Commande depuis API:', order);
      }
    } catch (error) {
      console.error('Erreur chargement commande:', error);
    }
  }

  // Fallback sur localStorage seulement si l'API √©choue
  if (!order) {
    const lastOrder = localStorage.getItem('last_order');
    if (lastOrder) {
      order = JSON.parse(lastOrder);
      console.log('üì¶ Fallback sur localStorage:', order);
    }
  }

  if (!order) {
    showError('Commande introuvable', 'Impossible de charger les d√©tails de votre commande');
    return;
  }

  // V√©rifier le statut de paiement
  const paymentStatus = order.paiement?.statut;
  const paymentMode = order.paiement?.mode;

  console.log(`üí≥ Statut: ${paymentStatus} | Mode: ${paymentMode} | Tentative: ${retryCount + 1}`);

  // Si paiement en ligne et en attente, attendre le webhook
  if (paymentMode === 'en_ligne' && paymentStatus === 'en_attente_paiement') {
    if (retryCount < MAX_RETRIES) {
      console.log(`‚è≥ En attente du webhook Stripe... retry dans ${RETRY_DELAY}ms`);
      setTimeout(() => {
        loadOrder(retryCount + 1);
      }, RETRY_DELAY);
      return;
    } else {
      // Apr√®s toutes les tentatives, consid√©rer comme √©chec
      console.log('‚ö†Ô∏è Timeout - Webhook non re√ßu, redirection vers payment-cancel');
      window.location.href = `/payment-cancel?order=${order.id}&reason=payment_pending`;
      return;
    }
  }

  // Si paiement en ligne et pay√© avec succ√®s, vider le panier
  if (paymentMode === 'en_ligne' && paymentStatus === 'paye') {
    console.log('‚úÖ Paiement confirm√© - vidage du panier');
    localStorage.removeItem('cart');
    localStorage.removeItem('last_order'); // ‚úÖ Nettoyer aussi last_order
    window.dispatchEvent(new Event('cart-updated'));
  }

  // Afficher la commande
  displayOrder(order);
  
  // Cacher le loading et afficher le contenu
  document.getElementById('loading-initial').style.display = 'none';
  document.getElementById('main-content').style.display = 'block';
}

  function showError(title, message) {
    document.getElementById('loading-initial').style.display = 'none';
    document.getElementById('main-content').style.display = 'block';
    
    const alertBox = document.querySelector('.alert-success');
    alertBox.classList.remove('alert-success');
    alertBox.classList.add('alert-error');
    alertBox.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
      </svg>
      <div>
        <h3 class="font-bold">${title}</h3>
        <div class="text-sm">${message}</div>
      </div>
    `;
  }

  // Afficher la commande
  function displayOrder(order) {
    // Num√©ro et date
    document.getElementById('order-numero').textContent = `Commande #${order.numero}`;
    document.getElementById('order-date').textContent = formatDate(order.date_creation);
    
    // Statut
    const statusBadge = document.getElementById('order-status');
    statusBadge.textContent = statusLabels[order.statut] || order.statut;

    // Informations client
    const clientInfo = document.getElementById('client-info');
    let clientHTML = `
      <div>
        <p class="text-sm text-base-content/60">Nom</p>
        <p class="font-semibold">${order.client.prenom} ${order.client.nom}</p>
      </div>
      <div>
        <p class="text-sm text-base-content/60">T√©l√©phone</p>
        <p class="font-semibold">${order.client.telephone}</p>
      </div>
      <div>
        <p class="text-sm text-base-content/60">Email</p>
        <p class="font-semibold">${order.client.email}</p>
      </div>
      <div>
        <p class="text-sm text-base-content/60">Mode</p>
        <p class="font-semibold capitalize">${order.type.replace('_', ' ')}</p>
      </div>
    `;

    // Adresse si livraison
    if (order.type === 'livraison' && order.client.adresse) {
      const addr = order.client.adresse;
      clientHTML += `
        <div class="md:col-span-2">
          <p class="text-sm text-base-content/60">Adresse de livraison</p>
          <p class="font-semibold">${addr.rue} ${addr.numero}, ${addr.code_postal} ${addr.ville}</p>
        </div>
      `;
    }

    // Table si sur place
    if (order.numero_table) {
      clientHTML += `
        <div>
          <p class="text-sm text-base-content/60">Table</p>
          <p class="font-semibold">${order.numero_table}</p>
        </div>
      `;
    }

    // Heure si √† emporter
    if (order.heure_souhaitee) {
      clientHTML += `
        <div>
          <p class="text-sm text-base-content/60">Heure souhait√©e</p>
          <p class="font-semibold">${order.heure_souhaitee}</p>
        </div>
      `;
    }

    clientInfo.innerHTML = clientHTML;

    // Articles
    const itemsContainer = document.getElementById('order-items');
    itemsContainer.innerHTML = order.articles.map(item => `
      <div class="flex justify-between items-start border-b border-base-200 pb-3">
        <div class="flex-1">
          <p class="font-semibold">${item.quantite}x ${item.nom}</p>
          ${item.supplements && item.supplements.length > 0 ? `
            <p class="text-sm text-base-content/70">+ ${item.supplements.map(s => s.name).join(', ')}</p>
          ` : ''}
          ${item.removed_ingredients && item.removed_ingredients.length > 0 ? `
            <p class="text-sm text-base-content/70">Sans: ${item.removed_ingredients.join(', ')}</p>
          ` : ''}
        </div>
        <span class="font-semibold">${formatPrice(item.prix * item.quantite)}</span>
      </div>
    `).join('');

    // Prix
    document.getElementById('order-subtotal').textContent = formatPrice(order.sous_total);
    
    if (order.frais_livraison && order.frais_livraison > 0) {
      document.getElementById('order-delivery-row').style.display = 'flex';
      document.getElementById('order-delivery-fees').textContent = formatPrice(order.frais_livraison);
    }
    
    document.getElementById('order-total').textContent = formatPrice(order.prix_total);

    // Notes
    if (order.notes) {
      const notesDiv = document.createElement('div');
      notesDiv.className = 'alert';
      notesDiv.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
        <div>
          <p class="text-sm font-semibold">Commentaires</p>
          <p class="text-sm">${order.notes}</p>
        </div>
      `;
      itemsContainer.parentElement.appendChild(notesDiv);
    }
  }

  // Bouton suivre la commande
  document.getElementById('track-order-btn')?.addEventListener('click', () => {
    const lastOrder = localStorage.getItem('last_order');
    if (lastOrder) {
      const order = JSON.parse(lastOrder);
      window.location.href = `/status?numero=${order.numero}`;
    } else {
      window.location.href = '/status';
    }
  });

  // Charger au d√©marrage
  loadOrder();
</script>