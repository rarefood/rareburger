---
// src/pages/cuisine/archives.astro
import "../../assets/app.css";

export const prerender = false;

const RESTAURANT_ID = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';

// V√©rification auth chef
const token = Astro.cookies.get('chef_token')?.value;
if (!token) {
  return Astro.redirect('/cuisine/login');
}
---

<!DOCTYPE html>
<html lang="fr" data-theme="autumn">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex, nofollow">
  <title>Archives - Cuisine</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
</head>

<body class="bg-base-200 min-h-screen">
  
  <!-- Header -->
  <div class="navbar bg-base-100 shadow-lg sticky top-0 z-50">
    <div class="flex-1">
      <a href="/cuisine" class="btn btn-ghost btn-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Retour
      </a>
      <div class="ml-4">
        <h1 class="text-2xl font-bold">Archives (24h)</h1>
        <p class="text-sm text-base-content/60">Commandes termin√©es et annul√©es</p>
      </div>
    </div>
  </div>

  <div class="container mx-auto px-4 py-8">

    <!-- Stats rapides -->
    <div class="stats stats-vertical lg:stats-horizontal shadow-lg w-full mb-6">
      <div class="stat">
        <div class="stat-title">Total 24h</div>
        <div class="stat-value text-primary" id="totalCount">0</div>
        <div class="stat-desc">Commandes archiv√©es</div>
      </div>
      <div class="stat">
        <div class="stat-title">Termin√©es</div>
        <div class="stat-value text-success" id="termineesCount">0</div>
      </div>
      <div class="stat">
        <div class="stat-title">Annul√©es</div>
        <div class="stat-value text-error" id="annuleesCount">0</div>
      </div>
      <div class="stat">
        <div class="stat-title">CA 24h</div>
        <div class="stat-value text-info" id="ca24h">0‚Ç¨</div>
      </div>
    </div>

    <!-- Filtres et recherche -->
    <div class="card bg-base-100 shadow-lg mb-6">
      <div class="card-body">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          
          <!-- Recherche -->
          <div class="form-control">
            <label class="label">
              <span class="label-text font-bold">Rechercher</span>
            </label>
            <input 
              type="text" 
              id="searchInput" 
              placeholder="Num√©ro, client, t√©l√©phone..." 
              class="input input-bordered input-lg"
            />
          </div>

          <!-- Filtre statut -->
          <div class="form-control">
            <label class="label">
              <span class="label-text font-bold">Statut</span>
            </label>
            <select id="filterStatut" class="select select-bordered select-lg">
              <option value="all">Tous</option>
              <option value="terminee">Termin√©es</option>
              <option value="annulee">Annul√©es</option>
            </select>
          </div>

          <!-- Filtre type -->
          <div class="form-control">
            <label class="label">
              <span class="label-text font-bold">Type</span>
            </label>
            <select id="filterType" class="select select-bordered select-lg">
              <option value="all">Tous</option>
              <option value="sur_place">Sur place</option>
              <option value="emporter">√Ä emporter</option>
              <option value="livraison">Livraison</option>
            </select>
          </div>

        </div>

        <div class="flex justify-between items-center mt-4">
          <div class="text-sm text-base-content/60">
            <span id="displayCount">0</span> commande(s) affich√©e(s)
          </div>
          <button class="btn btn-ghost btn-sm" id="resetFilters">
            R√©initialiser
          </button>
        </div>
      </div>
    </div>

    <!-- Loader -->
    <div id="loader" class="flex justify-center py-20">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <!-- Liste des commandes -->
    <div id="commandesList" class="space-y-4 hidden">
      <!-- Rempli par JS -->
    </div>

    <!-- Message vide -->
    <div id="emptyState" class="hidden text-center py-20">
      <div class="text-6xl mb-4">üì¶</div>
      <h3 class="text-2xl font-bold mb-2">Aucune commande archiv√©e</h3>
      <p class="text-base-content/60">Aucune commande ne correspond √† vos crit√®res</p>
    </div>

  </div>

  <!-- Modal d√©tail -->
  <dialog id="detailModal" class="modal">
    <div class="modal-box max-w-4xl">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">‚úï</button>
      </form>
      
      <!-- Header -->
      <div class="flex justify-between items-start mb-6">
        <div>
          <h3 class="font-bold text-3xl mb-2" id="modalNumero">Commande</h3>
          <div class="flex gap-2">
            <span class="badge badge-lg" id="modalStatut">Statut</span>
            <span class="badge badge-lg" id="modalType">Type</span>
          </div>
        </div>
        <div class="text-right">
          <div class="text-sm text-base-content/60">Date</div>
          <div class="font-bold" id="modalDate">Date</div>
        </div>
      </div>

      <!-- Client -->
      <div class="alert mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
        <div>
          <div class="font-bold" id="modalClient">Client</div>
          <div class="text-sm" id="modalTelephone">T√©l√©phone</div>
        </div>
      </div>

      <!-- Adresse si livraison -->
      <div id="modalAdresse" class="alert alert-info mb-4 hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        </svg>
        <div>
          <div class="font-bold">Adresse de livraison</div>
          <div id="modalAdresseTexte"></div>
        </div>
      </div>

      <div class="divider">Articles</div>

      <!-- Liste articles -->
      <div class="space-y-3 mb-6" id="modalArticles">
        <!-- Rempli par JS -->
      </div>

      <!-- Total -->
      <div class="flex justify-between items-center text-xl font-bold">
        <span>Total</span>
        <span id="modalTotal">0‚Ç¨</span>
      </div>

      <!-- Notes -->
      <div id="modalNotes" class="alert alert-warning mt-4 hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
        <div>
          <div class="font-bold">Instructions</div>
          <div id="modalNotesTexte"></div>
        </div>
      </div>

      <div class="divider"></div>

      <!-- Bouton imprimer -->
      <div class="flex justify-end">
        <button id="imprimerTicket" class="btn btn-primary btn-lg">
          Imprimer le ticket
        </button>
      </div>

    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>

</body>
</html>

<script define:vars={{ RESTAURANT_ID }}>
  let allCommandes = [];
  let filteredCommandes = [];
  let currentCommandeId = null;

  // Charger config et th√®me
  async function loadConfig() {
    try {
      const response = await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/config`);
      const config = await response.json();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = `https://api.cmdola.be/api/images/${RESTAURANT_ID}/${config.theme.logo}`;
        const favicon = document.getElementById('favicon');
        if (favicon) favicon.href = logoUrl;
      }
    } catch (error) {
      console.error('Erreur config:', error);
    }
  }

  // Formater prix
  function formatPrice(price) {
    return new Intl.NumberFormat('fr-BE', {
      style: 'currency',
      currency: 'EUR'
    }).format(price);
  }

  // Formater date
  function formatDate(dateStr) {
    const date = new Date(dateStr);
    return new Intl.DateTimeFormat('fr-BE', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  }

  // Infos type
  function getTypeInfo(type) {
    const types = {
      'sur_place': { icon: 'üçΩÔ∏è', badge: 'badge-success', label: 'Sur place' },
      'emporter': { icon: 'ü•°', badge: 'badge-info', label: '√Ä emporter' },
      'livraison': { icon: 'üöö', badge: 'badge-primary', label: 'Livraison' }
    };
    return types[type] || { icon: 'üì¶', badge: 'badge-ghost', label: type };
  }

  // Infos statut
  function getStatutInfo(statut) {
    const statuts = {
      'terminee': { badge: 'badge-success', label: 'Termin√©e' },
      'annulee': { badge: 'badge-error', label: 'Annul√©e' }
    };
    return statuts[statut] || { badge: 'badge-ghost', label: statut };
  }

  // Charger commandes
  async function loadCommandes() {
    try {
      const response = await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes`);
      const data = await response.json();
      
      // Filtrer commandes des 24h (termin√©es ou annul√©es)
      const now = new Date();
      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
      
      allCommandes = (data.commandes || []).filter(cmd => {
        const cmdDate = new Date(cmd.date_creation);
        const statut = cmd.statut.toLowerCase().trim();
        return cmdDate >= yesterday && 
       (statut === 'terminee' || statut === 'termin√©e' || statut === 'annulee' || statut === 'annul√©e');
      });

      // Trier par date (plus r√©centes en premier)
      allCommandes.sort((a, b) => new Date(b.date_creation) - new Date(a.date_creation));

      updateStats();
      applyFilters();

      document.getElementById('loader').classList.add('hidden');

    } catch (error) {
      console.error('Erreur chargement:', error);
      document.getElementById('loader').innerHTML = `
        <div class="alert alert-error">
          <span>Erreur de chargement des archives</span>
        </div>
      `;
    }
  }

  // Mettre √† jour stats
  function updateStats() {
    const terminees = allCommandes.filter(c => c.statut === 'terminee');
    const annulees = allCommandes.filter(c => c.statut === 'annulee');
    const ca = terminees.reduce((sum, c) => sum + c.prix_total, 0);

    document.getElementById('totalCount').textContent = allCommandes.length;
    document.getElementById('termineesCount').textContent = terminees.length;
    document.getElementById('annuleesCount').textContent = annulees.length;
    document.getElementById('ca24h').textContent = formatPrice(ca);
  }

  // Appliquer filtres
  function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const filterStatut = document.getElementById('filterStatut').value;
    const filterType = document.getElementById('filterType').value;

    filteredCommandes = allCommandes.filter(cmd => {
      // Recherche
      if (searchTerm) {
        const matchNumero = cmd.numero.toLowerCase().includes(searchTerm);
        const matchClient = (cmd.client?.nom || '').toLowerCase().includes(searchTerm) ||
                           (cmd.client?.prenom || '').toLowerCase().includes(searchTerm);
        const matchTel = (cmd.client?.telephone || '').includes(searchTerm);
        
        if (!matchNumero && !matchClient && !matchTel) return false;
      }

      // Filtre statut
      if (filterStatut !== 'all' && cmd.statut !== filterStatut) return false;

      // Filtre type
      if (filterType !== 'all' && cmd.type !== filterType) return false;

      return true;
    });

    renderCommandes();
  }

  // Render commandes
  function renderCommandes() {
    const container = document.getElementById('commandesList');
    const emptyState = document.getElementById('emptyState');
    const displayCount = document.getElementById('displayCount');

    displayCount.textContent = filteredCommandes.length;

    if (filteredCommandes.length === 0) {
      container.classList.add('hidden');
      emptyState.classList.remove('hidden');
      return;
    }

    emptyState.classList.add('hidden');
    container.classList.remove('hidden');

    container.innerHTML = filteredCommandes.map(cmd => {
      const typeInfo = getTypeInfo(cmd.type);
      const statutInfo = getStatutInfo(cmd.statut);
      const articleCount = cmd.articles.reduce((sum, a) => sum + a.quantite, 0);

      return `
        <div class="card bg-base-100 shadow-lg hover:shadow-xl cursor-pointer transition-all"
             onclick="openDetailModal('${cmd.id}')">
          <div class="card-body p-6">
            <div class="flex flex-col lg:flex-row justify-between gap-4">
              
              <!-- Gauche: Infos principales -->
              <div class="flex-1">
                <div class="flex items-center gap-3 mb-2">
                  <h3 class="text-2xl font-mono font-bold">#${cmd.numero}</h3>
                  <span class="badge ${statutInfo.badge} badge-lg">
                    ${statutInfo.label}
                  </span>
                  <span class="badge ${typeInfo.badge}">
                    ${typeInfo.icon} ${typeInfo.label}
                  </span>
                </div>
                <div class="text-base-content/70">
                  <div class="text-lg font-bold">${cmd.client?.prenom || ''} ${cmd.client?.nom || 'Client'}</div>
                  <div>${cmd.client?.telephone || ''}</div>
                  <div class="text-sm mt-1">${formatDate(cmd.date_creation)}</div>
                </div>
              </div>

              <!-- Droite: Articles et prix -->
              <div class="text-right">
                <div class="text-sm text-base-content/60 mb-2">
                  ${articleCount} article${articleCount > 1 ? 's' : ''}
                </div>
                <div class="text-3xl font-bold">${formatPrice(cmd.prix_total)}</div>
                ${cmd.notes ? `
                  <div class="badge badge-warning badge-sm mt-2">
                    Instructions sp√©ciales
                  </div>
                ` : ''}
              </div>

            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  // Ouvrir modal d√©tail
  window.openDetailModal = function(commandeId) {
    const commande = allCommandes.find(c => c.id === commandeId);
    if (!commande) return;

    currentCommandeId = commandeId;
    const typeInfo = getTypeInfo(commande.type);
    const statutInfo = getStatutInfo(commande.statut);

    document.getElementById('modalNumero').textContent = `#${commande.numero}`;
    
    document.getElementById('modalStatut').textContent = statutInfo.label;
    document.getElementById('modalStatut').className = `badge badge-lg ${statutInfo.badge}`;
    
    document.getElementById('modalType').textContent = `${typeInfo.icon} ${typeInfo.label}`;
    document.getElementById('modalType').className = `badge badge-lg ${typeInfo.badge}`;
    
    document.getElementById('modalDate').textContent = formatDate(commande.date_creation);

    document.getElementById('modalClient').textContent = 
      `${commande.client?.prenom || ''} ${commande.client?.nom || 'Client'}`;
    document.getElementById('modalTelephone').textContent = commande.client?.telephone || '';

    // Adresse
    const modalAdresse = document.getElementById('modalAdresse');
    if (commande.type === 'livraison' && commande.client?.adresse) {
      const addr = commande.client.adresse;
      document.getElementById('modalAdresseTexte').textContent = 
        `${addr.rue} ${addr.numero}, ${addr.code_postal} ${addr.ville}`;
      modalAdresse.classList.remove('hidden');
    } else {
      modalAdresse.classList.add('hidden');
    }

    // Articles
    const articlesHtml = commande.articles.map(article => `
      <div class="card bg-base-200">
        <div class="card-body p-4">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <div class="flex items-center gap-2">
                <span class="badge badge-lg badge-primary">${article.quantite}x</span>
                <span class="font-bold text-lg">${article.nom}</span>
              </div>
              ${article.supplements && article.supplements.length > 0 ? `
                <div class="text-sm text-success mt-2">
                  + ${article.supplements.map(s => s.name).join(', ')}
                </div>
              ` : ''}
              ${article.removed_ingredients && article.removed_ingredients.length > 0 ? `
                <div class="text-sm text-error mt-1">
                  Sans: ${article.removed_ingredients.join(', ')}
                </div>
              ` : ''}
            </div>
            <span class="font-bold text-xl">${formatPrice(article.prix * article.quantite)}</span>
          </div>
        </div>
      </div>
    `).join('');
    document.getElementById('modalArticles').innerHTML = articlesHtml;

    document.getElementById('modalTotal').textContent = formatPrice(commande.prix_total);

    // Notes
    const modalNotes = document.getElementById('modalNotes');
    if (commande.notes) {
      document.getElementById('modalNotesTexte').textContent = commande.notes;
      modalNotes.classList.remove('hidden');
    } else {
      modalNotes.classList.add('hidden');
    }

    detailModal.showModal();
  };

  // Imprimer
  document.getElementById('imprimerTicket').addEventListener('click', async () => {
    try {
      await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}/print`, {
        method: 'POST'
      });
      alert('Ticket envoy√© √† l\'imprimante');
    } catch (error) {
      console.error('Erreur impression:', error);
      alert('Erreur lors de l\'impression');
    }
  });

  // Event listeners
  document.getElementById('searchInput').addEventListener('input', applyFilters);
  document.getElementById('filterStatut').addEventListener('change', applyFilters);
  document.getElementById('filterType').addEventListener('change', applyFilters);

  document.getElementById('resetFilters').addEventListener('click', () => {
    document.getElementById('searchInput').value = '';
    document.getElementById('filterStatut').value = 'all';
    document.getElementById('filterType').value = 'all';
    applyFilters();
  });

  // Init
  loadConfig();
  loadCommandes();
</script>

</html>