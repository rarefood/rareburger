---
// src/pages/cuisine/index.astro
import "../../assets/app.css";

export const prerender = false;

const RESTAURANT_ID = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';

// Vérification auth chef
const token = Astro.cookies.get('chef_token')?.value;
if (!token) {
  return Astro.redirect('/cuisine/login');
}
---

<!DOCTYPE html>
<html lang="fr" data-theme="autumn">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex, nofollow">
  <title>Cuisine - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
  <style>
    /* Colonnes Kanban */
    .kanban-column {
      min-height: calc(100vh - 300px);
    }
    
    /* Animation nouvelle commande */
    @keyframes pulse-ring {
      0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); }
      100% { box-shadow: 0 0 0 20px rgba(59, 130, 246, 0); }
    }
    
    .new-order-pulse {
      animation: pulse-ring 1.5s ease-out infinite;
    }

    /* Badge temps urgent */
    .time-urgent {
      animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Optimisation tactile */
    .order-card {
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
    }

    .order-card:active {
      transform: scale(0.98);
    }

    /* Scroll personnalisé */
    .kanban-column::-webkit-scrollbar {
      width: 8px;
    }

    .kanban-column::-webkit-scrollbar-thumb {
      background: rgba(0,0,0,0.2);
      border-radius: 4px;
    }
  </style>
</head>

<body class="bg-base-200 min-h-screen">
  
  <!-- Header -->
  <div class="navbar bg-base-100 shadow-lg sticky top-0 z-50">
    <div class="flex-1">
      <img src="/favicon.ico" alt="Logo" class="w-12 h-12 rounded-lg mr-3" id="navLogo" />
      <div>
        <h1 class="text-2xl font-bold" id="restaurantName">Cuisine</h1>
        <p class="text-sm text-base-content/60" id="chefName">Chef</p>
      </div>
    </div>
    
    <div class="flex-none gap-2">
      <!-- Compteurs -->
      <div class="stats shadow-lg">
        <div class="stat py-2 px-4">
          <div class="stat-title text-xs">Nouvelles</div>
          <div class="stat-value text-2xl text-warning" id="countNouvelles">0</div>
        </div>
        <div class="stat py-2 px-4">
          <div class="stat-title text-xs">En cours</div>
          <div class="stat-value text-2xl text-info" id="countEnPreparation">0</div>
        </div>
        <div class="stat py-2 px-4">
          <div class="stat-title text-xs">Prêtes</div>
          <div class="stat-value text-2xl text-success" id="countPretes">0</div>
        </div>
      </div>

      <!-- Indicateur refresh -->
      <div id="refreshIndicator" class="hidden">
        <span class="loading loading-spinner loading-md"></span>
      </div>

      <!-- Auto-refresh toggle -->
      <button id="toggleAutoRefresh" class="btn btn-ghost btn-circle" title="Auto-refresh">
        <span id="autoRefreshIcon">🔄</span>
      </button>

      <!-- Archives -->
      <a href="/cuisine/archives" class="btn btn-ghost btn-circle" title="Archives">
        📦
      </a>

      <!-- Déconnexion -->
      <a href="/cuisine/logout" class="btn btn-error btn-circle" title="Fin de service">
        🚪
      </a>
    </div>
  </div>

  <!-- Filtres rapides -->
  <div class="container mx-auto px-4 py-4">
    <div class="flex gap-2 overflow-x-auto pb-2">
      <button class="btn btn-sm filter-btn active" data-filter="all">Toutes</button>
      <button class="btn btn-sm filter-btn" data-filter="sur_place">🍽️ Sur place</button>
      <button class="btn btn-sm filter-btn" data-filter="emporter">🥡 À emporter</button>
      <button class="btn btn-sm filter-btn" data-filter="livraison">🚚 Livraison</button>
    </div>
  </div>

  <!-- Vue Kanban -->
  <div class="container mx-auto px-4 pb-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      
      <!-- Colonne NOUVELLES -->
      <div>
        <div class="card bg-warning text-warning-content shadow-lg mb-4">
          <div class="card-body p-4">
            <h2 class="card-title text-xl">🆕 Nouvelles</h2>
            <p class="text-sm opacity-80">Commandes en attente</p>
          </div>
        </div>
        <div id="colonneNouvelles" class="space-y-4 kanban-column overflow-y-auto">
          <!-- Rempli par JS -->
        </div>
      </div>

      <!-- Colonne EN PRÉPARATION -->
      <div>
        <div class="card bg-info text-info-content shadow-lg mb-4">
          <div class="card-body p-4">
            <h2 class="card-title text-xl">👨‍🍳 En préparation</h2>
            <p class="text-sm opacity-80">Commandes en cours</p>
          </div>
        </div>
        <div id="colonneEnPreparation" class="space-y-4 kanban-column overflow-y-auto">
          <!-- Rempli par JS -->
        </div>
      </div>

      <!-- Colonne PRÊTES -->
      <div>
        <div class="card bg-success text-success-content shadow-lg mb-4">
          <div class="card-body p-4">
            <h2 class="card-title text-xl">✅ Prêtes</h2>
            <p class="text-sm opacity-80">En attente de retrait/livraison</p>
          </div>
        </div>
        <div id="colonnePretes" class="space-y-4 kanban-column overflow-y-auto">
          <!-- Rempli par JS -->
        </div>
      </div>

    </div>
  </div>

  <!-- Modal détail commande -->
  <dialog id="detailModal" class="modal">
    <div class="modal-box max-w-4xl">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
      </form>
      
      <!-- Header modal -->
      <div class="flex justify-between items-start mb-6">
        <div>
          <h3 class="font-bold text-3xl mb-2" id="modalNumero">Commande</h3>
          <div class="flex gap-2">
            <span class="badge badge-lg" id="modalType">Type</span>
            <span class="badge badge-lg" id="modalTemps">Temps</span>
          </div>
        </div>
        <div class="text-right">
          <div class="text-sm text-base-content/60">Client</div>
          <div class="font-bold text-xl" id="modalClient">Client</div>
          <div class="text-sm" id="modalTelephone">Tel</div>
        </div>
      </div>

      <!-- Adresse si livraison -->
      <div id="modalAdresse" class="alert alert-info mb-4 hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        </svg>
        <div>
          <div class="font-bold">Adresse de livraison</div>
          <div id="modalAdresseTexte"></div>
        </div>
      </div>

      <!-- Table si sur place -->
      <div id="modalTable" class="alert mb-4 hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
        <div>
          <span class="font-bold">Table:</span>
          <span id="modalTableNumero"></span>
        </div>
      </div>

      <div class="divider">Articles</div>

      <!-- Liste articles -->
      <div class="space-y-3 mb-6" id="modalArticles">
        <!-- Rempli par JS -->
      </div>

      <!-- Notes -->
      <div id="modalNotes" class="alert alert-warning mb-6 hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
        <div>
          <div class="font-bold">Instructions</div>
          <div id="modalNotesTexte"></div>
        </div>
      </div>

      <div class="divider"></div>

      <!-- Actions -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        
        <!-- Changer statut -->
        <div class="form-control">
          <label class="label">
            <span class="label-text font-bold">Changer le statut</span>
          </label>
          <select id="modalStatut" class="select select-bordered select-lg">
            <option value="nouvelle">🆕 Nouvelle</option>
            <option value="en_preparation">👨‍🍳 En préparation</option>
            <option value="prete">✅ Prête</option>
            <option value="en_livraison">🚚 En livraison</option>
            <option value="terminee">✔️ Terminée</option>
          </select>
        </div>

        <!-- Bouton confirmer -->
        <div class="flex items-end">
          <button id="confirmerStatut" class="btn btn-primary btn-lg btn-block">
            Confirmer le changement
          </button>
        </div>

        <!-- Bouton imprimer -->
        <div class="flex items-end">
          <button id="imprimerTicket" class="btn btn-ghost btn-lg btn-block">
            🖨️ Imprimer
          </button>
        </div>

      </div>
    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>

  <!-- Audio notification (caché) -->
  <audio id="notificationSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFA==" type="audio/wav">
  </audio>

</body>
</html>

<script define:vars={{ RESTAURANT_ID }}>
  let allCommandes = [];
  let filteredCommandes = [];
  let currentFilter = 'all';
  let autoRefreshInterval = null;
  let autoRefreshEnabled = true;
  let lastCommandeCount = 0;
  let currentCommandeId = null;

  // Charger config et thème
  async function loadConfig() {
    try {
      const response = await fetch(`https://api.rareburger.be/api/${RESTAURANT_ID}/config`);
      const config = await response.json();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = `https://api.rareburger.be/api/images/${RESTAURANT_ID}/${config.theme.logo}`;
        const favicon = document.getElementById('favicon');
        const navLogo = document.getElementById('navLogo');
        if (favicon) favicon.href = logoUrl;
        if (navLogo) navLogo.src = logoUrl;
      }

      if (config.nom) {
        const nameEl = document.getElementById('restaurantName');
        if (nameEl) nameEl.textContent = config.nom;
      }

      // Charger le nom du chef
      const chefInfo = localStorage.getItem('chef_info');
      if (chefInfo) {
        const chef = JSON.parse(chefInfo);
        const chefNameEl = document.getElementById('chefName');
        if (chefNameEl) chefNameEl.textContent = `Chef ${chef.nom || chef.username}`;
      }
    } catch (error) {
      console.error('Erreur config:', error);
    }
  }

  // Formater le temps écoulé
  function getTimeElapsed(dateStr) {
    const now = new Date();
    const orderDate = new Date(dateStr);
    const diffMs = now - orderDate;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return { text: "À l'instant", urgent: false };
    if (diffMins === 1) return { text: "Il y a 1 min", urgent: false };
    if (diffMins < 15) return { text: `Il y a ${diffMins} min`, urgent: false };
    if (diffMins < 30) return { text: `Il y a ${diffMins} min`, urgent: true };
    if (diffMins < 60) return { text: `Il y a ${diffMins} min ⚠️`, urgent: true };
    
    const diffHours = Math.floor(diffMins / 60);
    return { text: `Il y a ${diffHours}h${diffMins % 60}`, urgent: true };
  }

  // Icône et couleur selon type
  function getTypeInfo(type) {
    const types = {
      'sur_place': { icon: '🍽️', badge: 'badge-success', label: 'Sur place' },
      'emporter': { icon: '🥡', badge: 'badge-info', label: 'À emporter' },
      'livraison': { icon: '🚚', badge: 'badge-primary', label: 'Livraison' }
    };
    return types[type] || { icon: '📦', badge: 'badge-ghost', label: type };
  }

  // Formater prix
  function formatPrice(price) {
    return new Intl.NumberFormat('fr-BE', {
      style: 'currency',
      currency: 'EUR'
    }).format(price);
  }

  // Charger les commandes
  // Charger les commandes
async function loadCommandes(silent = false) {
  if (!silent) {
    document.getElementById('refreshIndicator').classList.remove('hidden');
  }

  try {
    const response = await fetch(`https://api.rareburger.be/api/${RESTAURANT_ID}/commandes`);
    const data = await response.json();
    
    // ✅ NOUVEAU : Filtrer les commandes
    allCommandes = (data.commandes || []).filter(cmd => {
      // Exclure terminées et annulées
      if (cmd.statut === 'terminee' || cmd.statut === 'annulee') {
        return false;
      }
      
      // ✅ Exclure les paiements en ligne en attente
      if (cmd.paiement?.mode === 'en_ligne' && cmd.paiement?.statut === 'en_attente_paiement') {
        return false;
      }
      
      return true;
    });

    // Trier par date (plus anciennes en premier)
    allCommandes.sort((a, b) => new Date(a.date_creation) - new Date(b.date_creation));

    // Détecter nouvelles commandes
    if (allCommandes.length > lastCommandeCount && lastCommandeCount > 0) {
      playNotificationSound();
    }
    lastCommandeCount = allCommandes.length;

    applyFilter();
    updateCounters();

  } catch (error) {
    console.error('Erreur chargement commandes:', error);
  } finally {
    if (!silent) {
      setTimeout(() => {
        document.getElementById('refreshIndicator').classList.add('hidden');
      }, 500);
    }
  }
}


  // Jouer le son de notification
  function playNotificationSound() {
    const audio = document.getElementById('notificationSound');
    audio.play().catch(e => console.log('Son bloqué:', e));
  }

  // Appliquer le filtre
  function applyFilter() {
    if (currentFilter === 'all') {
      filteredCommandes = [...allCommandes];
    } else {
      filteredCommandes = allCommandes.filter(cmd => cmd.type === currentFilter);
    }
    renderKanban();
  }

  // Mettre à jour les compteurs
  function updateCounters() {
    const nouvelles = filteredCommandes.filter(c => c.statut === 'nouvelle').length;
    const enPreparation = filteredCommandes.filter(c => c.statut === 'en_preparation').length;
    const pretes = filteredCommandes.filter(c => c.statut === 'prete' || c.statut === 'en_livraison').length;

    document.getElementById('countNouvelles').textContent = nouvelles;
    document.getElementById('countEnPreparation').textContent = enPreparation;
    document.getElementById('countPretes').textContent = pretes;
  }

  // Render le Kanban
  function renderKanban() {
    renderColumn('nouvelle', 'colonneNouvelles');
    renderColumn('en_preparation', 'colonneEnPreparation');
    renderColumn(['prete', 'en_livraison'], 'colonnePretes');
  }

  // Render une colonne
  function renderColumn(statut, containerId) {
    const container = document.getElementById(containerId);
    const statuts = Array.isArray(statut) ? statut : [statut];
    const commandes = filteredCommandes.filter(c => statuts.includes(c.statut));

    if (commandes.length === 0) {
      container.innerHTML = `
        <div class="card bg-base-100 shadow-sm opacity-50">
          <div class="card-body text-center py-8">
            <p class="text-base-content/60">Aucune commande</p>
          </div>
        </div>
      `;
      return;
    }

    container.innerHTML = commandes.map(cmd => {
      const typeInfo = getTypeInfo(cmd.type);
      const timeInfo = getTimeElapsed(cmd.date_creation);
      const articleCount = cmd.articles.reduce((sum, a) => sum + a.quantite, 0);
      const isNew = statut === 'nouvelle';

      return `
        <div class="card bg-base-100 shadow-lg hover:shadow-2xl order-card ${isNew ? 'new-order-pulse' : ''}" 
             data-id="${cmd.id}" 
             onclick="openDetailModal('${cmd.id}')">
          <div class="card-body p-4">
            
            <!-- Header -->
            <div class="flex justify-between items-start mb-2">
              <div>
                <h3 class="card-title text-xl font-mono">#${cmd.numero}</h3>
                <div class="flex gap-1 mt-1">
                  <span class="badge ${typeInfo.badge} badge-sm">
                    ${typeInfo.icon} ${typeInfo.label}
                  </span>
                </div>
              </div>
              <span class="badge badge-lg ${timeInfo.urgent ? 'badge-error time-urgent' : 'badge-ghost'}">
                ${timeInfo.text}
              </span>
            </div>

            <!-- Info client -->
            <div class="text-sm text-base-content/70">
              <div class="font-bold">${cmd.client?.prenom || ''} ${cmd.client?.nom || 'Client'}</div>
              ${cmd.numero_table ? `<div>Table ${cmd.numero_table}</div>` : ''}
            </div>

            <!-- Résumé articles -->
            <div class="flex justify-between items-center mt-2 pt-2 border-t">
              <span class="text-sm">${articleCount} article${articleCount > 1 ? 's' : ''}</span>
              <span class="font-bold text-lg">${formatPrice(cmd.prix_total)}</span>
            </div>

            ${cmd.notes ? `
              <div class="alert alert-warning alert-sm mt-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <span class="text-xs">Instructions spéciales</span>
              </div>
            ` : ''}

          </div>
        </div>
      `;
    }).join('');
  }

  // Ouvrir modal détail
  window.openDetailModal = function(commandeId) {
    const commande = allCommandes.find(c => c.id === commandeId);
    if (!commande) return;

    currentCommandeId = commandeId;
    const typeInfo = getTypeInfo(commande.type);

    document.getElementById('modalNumero').textContent = `#${commande.numero}`;
    document.getElementById('modalType').textContent = `${typeInfo.icon} ${typeInfo.label}`;
    document.getElementById('modalType').className = `badge badge-lg ${typeInfo.badge}`;
    
    const timeInfo = getTimeElapsed(commande.date_creation);
    document.getElementById('modalTemps').textContent = timeInfo.text;
    document.getElementById('modalTemps').className = `badge badge-lg ${timeInfo.urgent ? 'badge-error' : 'badge-ghost'}`;

    document.getElementById('modalClient').textContent = `${commande.client?.prenom || ''} ${commande.client?.nom || 'Client'}`;
    document.getElementById('modalTelephone').textContent = commande.client?.telephone || '';

    // Adresse si livraison
    const modalAdresse = document.getElementById('modalAdresse');
    if (commande.type === 'livraison' && commande.client?.adresse) {
      const addr = commande.client.adresse;
      document.getElementById('modalAdresseTexte').textContent = 
        `${addr.rue} ${addr.numero}, ${addr.code_postal} ${addr.ville}`;
      modalAdresse.classList.remove('hidden');
    } else {
      modalAdresse.classList.add('hidden');
    }

    // Table si sur place
    const modalTable = document.getElementById('modalTable');
    if (commande.numero_table) {
      document.getElementById('modalTableNumero').textContent = commande.numero_table;
      modalTable.classList.remove('hidden');
    } else {
      modalTable.classList.add('hidden');
    }

    // Articles
    const articlesHtml = commande.articles.map(article => `
      <div class="card bg-base-200">
        <div class="card-body p-4">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <div class="flex items-center gap-2">
                <span class="badge badge-lg badge-primary">${article.quantite}x</span>
                <span class="font-bold text-lg">${article.nom}</span>
              </div>
              ${article.supplements && article.supplements.length > 0 ? `
                <div class="text-sm text-success mt-2">
                  + ${article.supplements.map(s => s.name).join(', ')}
                </div>
              ` : ''}
              ${article.removed_ingredients && article.removed_ingredients.length > 0 ? `
                <div class="text-sm text-error mt-1">
                  Sans: ${article.removed_ingredients.join(', ')}
                </div>
              ` : ''}
            </div>
            <span class="font-bold text-xl">${formatPrice(article.prix * article.quantite)}</span>
          </div>
        </div>
      </div>
    `).join('');
    document.getElementById('modalArticles').innerHTML = articlesHtml;

    // Notes
    const modalNotes = document.getElementById('modalNotes');
    if (commande.notes) {
      document.getElementById('modalNotesTexte').textContent = commande.notes;
      modalNotes.classList.remove('hidden');
    } else {
      modalNotes.classList.add('hidden');
    }

    // Statut actuel
    document.getElementById('modalStatut').value = commande.statut;

    detailModal.showModal();
  };

  // Confirmer changement statut
  document.getElementById('confirmerStatut').addEventListener('click', async () => {
    const newStatut = document.getElementById('modalStatut').value;

    try {
      await fetch(`https://api.rareburger.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          statut: newStatut
        })
      });

      detailModal.close();
      await loadCommandes();
    } catch (error) {
      console.error('Erreur changement statut:', error);
      alert('Erreur lors du changement de statut');
    }
  });

  // Imprimer ticket
  document.getElementById('imprimerTicket').addEventListener('click', async () => {
    try {
      await fetch(`https://api.rareburger.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}/print`, {
        method: 'POST'
      });
      alert('Ticket envoyé à l\'imprimante');
    } catch (error) {
      console.error('Erreur impression:', error);
      alert('Erreur lors de l\'impression');
    }
  });

  // Filtres
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentFilter = btn.dataset.filter;
      applyFilter();
    });
  });

  // Auto-refresh
  function startAutoRefresh() {
    if (autoRefreshInterval) return;
    autoRefreshInterval = setInterval(() => {
      loadCommandes(true);
    }, 10000); // 10 secondes
  }

  function stopAutoRefresh() {
    if (autoRefreshInterval) {
      clearInterval(autoRefreshInterval);
      autoRefreshInterval = null;
    }
  }

  document.getElementById('toggleAutoRefresh').addEventListener('click', () => {
    autoRefreshEnabled = !autoRefreshEnabled;
    const icon = document.getElementById('autoRefreshIcon');
    
    if (autoRefreshEnabled) {
      startAutoRefresh();
      icon.textContent = '🔄';
    } else {
      stopAutoRefresh();
      icon.textContent = '⏸️';
    }
  });

  // Init
  loadConfig();
  loadCommandes();
  startAutoRefresh();

  // Cleanup au déchargement
  window.addEventListener('beforeunload', stopAutoRefresh);
</script>

</html>