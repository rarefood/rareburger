---
// src/pages/livraison/index.astro
import "../../assets/app.css";

export const prerender = false;

const RESTAURANT_ID = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';

// VÃ©rification auth livreur
const token = Astro.cookies.get('livreur_token')?.value;
if (!token) {
  return Astro.redirect('/livraison/login');
}
---

<!DOCTYPE html>
<html lang="fr" data-theme="autumn">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="robots" content="noindex, nofollow">
  <meta name="theme-color" content="#1e293b">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <title>Livraisons - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
  <link rel="manifest" href="/manifest.json">
  <style>
    /* Design mobile-first */
    body {
      padding-bottom: 80px; /* Bottom nav */
    }

    .delivery-btn {
      min-height: 80px;
      transition: all 0.2s;
      user-select: none;
      -webkit-tap-highlight-color: transparent;
    }

    .delivery-btn:active {
      transform: scale(0.98);
    }

    .time-urgent {
      animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Bottom nav fixed */
    .bottom-nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: var(--fallback-b1, oklch(var(--b1)));
      border-top: 1px solid var(--fallback-bc, oklch(var(--bc)/0.2));
      z-index: 1000;
    }

    /* Scroll avec padding pour bottom nav */
    .content-wrapper {
      padding-bottom: 20px;
    }
  </style>
</head>

<body class="bg-base-200">
  
  <!-- Header -->
  <div class="navbar bg-base-100 shadow-lg sticky top-0 z-50">
    <div class="flex-1">
      <img src="/favicon.ico" alt="Logo" class="w-12 h-12 rounded-lg mr-3" id="navLogo" />
      <div>
        <h1 class="text-2xl font-bold" id="restaurantName">Livraisons</h1>
        <p class="text-sm text-base-content/60" id="livreurName">Livreur</p>
      </div>
    </div>
    
    <div class="flex-none gap-2">
      <!-- Badge notifications -->
      <div class="indicator">
        <span class="indicator-item badge badge-primary" id="availableCount">0</span>
        <div class="stat-value text-2xl">ðŸ“¦</div>
      </div>
      
      <!-- Auto-refresh indicator -->
      <div id="refreshIndicator" class="hidden">
        <span class="loading loading-spinner loading-md"></span>
      </div>
    </div>
  </div>

  <div class="content-wrapper">

    <!-- Stats -->
    <div class="stats stats-vertical lg:stats-horizontal shadow-lg w-full mb-4">
      <div class="stat py-3 px-4">
        <div class="stat-title">Disponibles</div>
        <div class="stat-value text-warning" id="statDisponibles">0</div>
      </div>
      <div class="stat py-3 px-4">
        <div class="stat-title">Mes livraisons</div>
        <div class="stat-value text-info" id="statMesLivraisons">0</div>
      </div>
      <div class="stat py-3 px-4">
        <div class="stat-title">LivrÃ©es aujourd'hui</div>
        <div class="stat-value text-success" id="statLivreesAujourdhui">0</div>
      </div>
    </div>

    <!-- Filtres -->
    <div class="px-4 mb-4">
      <div class="card bg-base-100 shadow-lg">
        <div class="card-body p-4">
          <div class="grid grid-cols-2 gap-3">
            
            <!-- Filtre affichage -->
            <div class="form-control">
              <label class="label py-1">
                <span class="label-text font-bold">Affichage</span>
              </label>
              <select id="filterAffichage" class="select select-bordered select-lg">
                <option value="all">Toutes</option>
                <option value="mine">Mes livraisons</option>
                <option value="available">Disponibles</option>
              </select>
            </div>

            <!-- Filtre tri -->
            <div class="form-control">
              <label class="label py-1">
                <span class="label-text font-bold">Tri</span>
              </label>
              <select id="filterTri" class="select select-bordered select-lg">
                <option value="oldest">Plus anciennes</option>
                <option value="recent">Plus rÃ©centes</option>
              </select>
            </div>

          </div>
        </div>
      </div>
    </div>

    <!-- Loader -->
    <div id="loader" class="flex justify-center py-20">
      <span class="loading loading-spinner loading-lg"></span>
    </div>

    <!-- Liste commandes -->
    <div id="livraisonsList" class="px-4 space-y-3 hidden">
      <!-- Rempli par JS -->
    </div>

    <!-- Empty state -->
    <div id="emptyState" class="hidden text-center py-20 px-4">
      <div class="text-6xl mb-4">ðŸšš</div>
      <h3 class="text-2xl font-bold mb-2">Aucune livraison</h3>
      <p class="text-base-content/60">Aucune commande Ã  livrer pour le moment</p>
    </div>

  </div>

  <!-- Bottom Navigation -->
  <div class="bottom-nav">
    <div class="flex justify-around py-3">
      <a href="/livraison" class="btn btn-ghost flex-col gap-1 flex-1">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
        <span class="text-xs">Accueil</span>
      </a>
      <a href="/livraison/historique" class="btn btn-ghost flex-col gap-1 flex-1">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span class="text-xs">Historique</span>
      </a>
      <a href="/livraison/logout" class="btn btn-ghost flex-col gap-1 flex-1 text-error">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
        </svg>
        <span class="text-xs">DÃ©co</span>
      </a>
    </div>
  </div>

  <!-- Modal dÃ©tail -->
  <dialog id="detailModal" class="modal">
    <div class="modal-box max-w-lg">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
      </form>
      
      <!-- Header -->
      <div class="text-center mb-6">
        <h3 class="font-bold text-3xl mb-2" id="modalNumero">#COMMANDE</h3>
        <div class="flex justify-center gap-2">
          <span class="badge badge-lg badge-warning" id="modalTemps">Temps</span>
          <span class="badge badge-lg" id="modalStatut">Statut</span>
        </div>
      </div>

      <!-- Client -->
      <div class="alert mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
        <div>
          <div class="font-bold text-lg" id="modalClient">Client</div>
          <div class="text-sm" id="modalTelephone">TÃ©lÃ©phone</div>
        </div>
      </div>

      <!-- Assignation -->
      <div id="assignationSection" class="hidden">
        <div class="alert alert-info mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <div>
            <div class="font-bold">AssignÃ©e Ã </div>
            <div id="assignedTo">Livreur</div>
          </div>
        </div>
      </div>

      <!-- Adresse (visible seulement si assignÃ©) -->
      <div id="adresseSection" class="hidden">
        <div class="divider">Adresse de livraison</div>
        
        <div class="alert alert-success mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          </svg>
          <div class="flex-1">
            <div class="font-bold">Adresse</div>
            <div id="modalAdresse" class="text-sm">Adresse complÃ¨te</div>
          </div>
        </div>

        <!-- Boutons GPS et copier -->
        <div class="grid grid-cols-2 gap-2 mb-4">
          <button id="btnGPS" class="btn btn-success btn-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
            </svg>
            GPS
          </button>
          <button id="btnCopyAdresse" class="btn btn-outline btn-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            Copier
          </button>
        </div>

        <!-- Bouton appeler -->
        <button id="btnAppeler" class="btn btn-info btn-block btn-lg mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          Appeler le client
        </button>
      </div>

      <div class="divider"></div>

      <!-- Actions -->
      <div class="space-y-3">
        
        <!-- S'assigner (visible si non assignÃ©) -->
        <button id="btnAssigner" class="btn btn-primary btn-block btn-lg hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          M'assigner cette livraison
        </button>

        <!-- Se dÃ©sassigner (visible si c'est ma livraison) -->
        <button id="btnDesassigner" class="btn btn-warning btn-block btn-lg hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Me dÃ©sassigner
        </button>

        <!-- Marquer livrÃ© (visible si c'est ma livraison et en_livraison) -->
        <button id="btnMarquerLivree" class="btn btn-success btn-block btn-lg hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          Marquer comme livrÃ©e
        </button>

      </div>

    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>

  <!-- Audio notification -->
  <audio id="notificationSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFApGn+DyvmwhBj2Z2/LMeSsEKHnI8N2RQAoTYrTp66hVFA==" type="audio/wav">
  </audio>

</body>
</html>

<script define:vars={{ RESTAURANT_ID }}>
  let allCommandes = [];
  let filteredCommandes = [];
  let currentFilter = 'all';
  let currentSort = 'oldest';
  let autoRefreshInterval = null;
  let lastAvailableCount = 0;
  let currentCommandeId = null;
  let livreurInfo = null;

  // Charger config
  async function loadConfig() {
    try {
      const response = await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/config`);
      const config = await response.json();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = `https://api.cmdola.be/api/images/${RESTAURANT_ID}/${config.theme.logo}`;
        const favicon = document.getElementById('favicon');
        const navLogo = document.getElementById('navLogo');
        if (favicon) favicon.href = logoUrl;
        if (navLogo) navLogo.src = logoUrl;
      }

      if (config.nom) {
        const nameEl = document.getElementById('restaurantName');
        if (nameEl) nameEl.textContent = config.nom;
      }

      // Info livreur
      const stored = localStorage.getItem('livreur_info');
      if (stored) {
        livreurInfo = JSON.parse(stored);
        const livreurNameEl = document.getElementById('livreurName');
        if (livreurNameEl) livreurNameEl.textContent = livreurInfo.nom || livreurInfo.username;
      }
    } catch (error) {
      console.error('Erreur config:', error);
    }
  }

  // Temps Ã©coulÃ©
  function getTimeElapsed(dateStr) {
    const now = new Date();
    const date = new Date(dateStr);
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return { text: "< 1 min", urgent: false };
    if (diffMins < 15) return { text: `${diffMins} min`, urgent: false };
    if (diffMins < 30) return { text: `${diffMins} min`, urgent: true };
    
    const diffHours = Math.floor(diffMins / 60);
    return { text: `${diffHours}h${diffMins % 60}`, urgent: true };
  }

  // Charger commandes
  async function loadCommandes(silent = false) {
    if (!silent) {
      document.getElementById('refreshIndicator').classList.remove('hidden');
    }

    try {
      const response = await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes`);
      const data = await response.json();
      
      // Filtrer: type livraison + (prete OU en_livraison)
      allCommandes = (data.commandes || []).filter(cmd => 
        cmd.type === 'livraison' && 
        (cmd.statut === 'prete' || cmd.statut === 'en_livraison')
      );

      // DÃ©tecter nouvelles disponibles
      const available = allCommandes.filter(c => !c.livreur_id).length;
      if (available > lastAvailableCount && lastAvailableCount > 0) {
        playNotificationSound();
      }
      lastAvailableCount = available;

      updateStats();
      applyFilters();

    } catch (error) {
      console.error('Erreur chargement:', error);
    } finally {
      if (!silent) {
        setTimeout(() => {
          document.getElementById('refreshIndicator').classList.add('hidden');
        }, 500);
      }
    }
  }

  // Notification sonore
  function playNotificationSound() {
    const audio = document.getElementById('notificationSound');
    audio.play().catch(e => console.log('Son bloquÃ©:', e));
  }

  // Stats
  function updateStats() {
    const disponibles = allCommandes.filter(c => !c.livreur_id).length;
    const mesLivraisons = allCommandes.filter(c => c.livreur_id === livreurInfo?.id).length;
    
    // LivrÃ©es aujourd'hui
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // On devrait fetch toutes les commandes livrÃ©es mais pour l'instant on compte juste mes en cours
    const livreesAujourdhui = mesLivraisons; // TODO: faire un vrai compteur

    document.getElementById('statDisponibles').textContent = disponibles;
    document.getElementById('statMesLivraisons').textContent = mesLivraisons;
    document.getElementById('statLivreesAujourdhui').textContent = livreesAujourdhui;
    document.getElementById('availableCount').textContent = disponibles;
  }

  // Filtres
  function applyFilters() {
    // Filtre affichage
    if (currentFilter === 'all') {
      filteredCommandes = [...allCommandes];
    } else if (currentFilter === 'mine') {
      filteredCommandes = allCommandes.filter(c => c.livreur_id === livreurInfo?.id);
    } else if (currentFilter === 'available') {
      filteredCommandes = allCommandes.filter(c => !c.livreur_id);
    }

    // Tri
    if (currentSort === 'oldest') {
      filteredCommandes.sort((a, b) => new Date(a.date_creation) - new Date(b.date_creation));
    } else {
      filteredCommandes.sort((a, b) => new Date(b.date_creation) - new Date(a.date_creation));
    }

    renderCommandes();
  }

  // Render
  function renderCommandes() {
    const container = document.getElementById('livraisonsList');
    const emptyState = document.getElementById('emptyState');
    const loader = document.getElementById('loader');

    loader.classList.add('hidden');

    if (filteredCommandes.length === 0) {
      container.classList.add('hidden');
      emptyState.classList.remove('hidden');
      return;
    }

    emptyState.classList.add('hidden');
    container.classList.remove('hidden');

    container.innerHTML = filteredCommandes.map(cmd => {
      const timeInfo = getTimeElapsed(cmd.date_creation);
      const isMine = cmd.livreur_id === livreurInfo?.id;
      const isAssigned = !!cmd.livreur_id;

      let badgeClass = 'badge-warning';
      let statusText = 'Disponible';
      if (isMine) {
        badgeClass = 'badge-info';
        statusText = 'Ma livraison';
      } else if (isAssigned) {
        badgeClass = 'badge-ghost';
        statusText = 'AssignÃ©e';
      }

      return `
        <button 
          class="btn delivery-btn btn-block justify-between text-left h-auto py-4 ${isMine ? 'btn-info' : isAssigned ? 'btn-disabled' : 'btn-primary'}"
          onclick="openDetailModal('${cmd.id}')"
          ${isAssigned && !isMine ? 'disabled' : ''}
        >
          <div class="flex-1">
            <div class="text-2xl font-bold mb-1">#${cmd.numero}</div>
            <div class="flex gap-2">
              <span class="badge ${badgeClass}">${statusText}</span>
              <span class="badge ${timeInfo.urgent ? 'badge-error time-urgent' : 'badge-ghost'}">
                ${timeInfo.text}
              </span>
            </div>
          </div>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      `;
    }).join('');
  }

  // Ouvrir modal
  window.openDetailModal = function(commandeId) {
    const commande = allCommandes.find(c => c.id === commandeId);
    if (!commande) return;

    currentCommandeId = commandeId;
    const timeInfo = getTimeElapsed(commande.date_creation);
    const isMine = commande.livreur_id === livreurInfo?.id;
    const isAssigned = !!commande.livreur_id;

    document.getElementById('modalNumero').textContent = `#${commande.numero}`;
    document.getElementById('modalTemps').textContent = timeInfo.text;
    document.getElementById('modalTemps').className = `badge badge-lg ${timeInfo.urgent ? 'badge-error time-urgent' : 'badge-ghost'}`;
    
    let statutText = 'PrÃªte';
    let statutBadge = 'badge-warning';
    if (commande.statut === 'en_livraison') {
      statutText = 'En livraison';
      statutBadge = 'badge-info';
    }
    document.getElementById('modalStatut').textContent = statutText;
    document.getElementById('modalStatut').className = `badge badge-lg ${statutBadge}`;

    document.getElementById('modalClient').textContent = 
      `${commande.client?.prenom || ''} ${commande.client?.nom || 'Client'}`;
    document.getElementById('modalTelephone').textContent = commande.client?.telephone || '';

    // Assignation
    const assignationSection = document.getElementById('assignationSection');
    if (isAssigned) {
      document.getElementById('assignedTo').textContent = 
        isMine ? 'Moi' : (commande.livreur_nom || 'Autre livreur');
      assignationSection.classList.remove('hidden');
    } else {
      assignationSection.classList.add('hidden');
    }

    // Adresse (visible seulement si assignÃ© Ã  moi)
    const adresseSection = document.getElementById('adresseSection');
    if (isMine && commande.client?.adresse) {
      const addr = commande.client.adresse;
      const fullAddress = `${addr.rue} ${addr.numero}, ${addr.code_postal} ${addr.ville}`;
      document.getElementById('modalAdresse').textContent = fullAddress;
      
      // Bouton GPS
      document.getElementById('btnGPS').onclick = () => {
        const encodedAddr = encodeURIComponent(fullAddress);
        window.open(`https://www.google.com/maps/dir/?api=1&destination=${encodedAddr}`, '_blank');
      };

      // Bouton copier
      document.getElementById('btnCopyAdresse').onclick = () => {
        navigator.clipboard.writeText(fullAddress);
        alert('Adresse copiÃ©e !');
      };

      // Bouton appeler
      document.getElementById('btnAppeler').onclick = () => {
        window.location.href = `tel:${commande.client.telephone}`;
      };

      adresseSection.classList.remove('hidden');
    } else {
      adresseSection.classList.add('hidden');
    }

    // Boutons actions
    const btnAssigner = document.getElementById('btnAssigner');
    const btnDesassigner = document.getElementById('btnDesassigner');
    const btnMarquerLivree = document.getElementById('btnMarquerLivree');

    btnAssigner.classList.add('hidden');
    btnDesassigner.classList.add('hidden');
    btnMarquerLivree.classList.add('hidden');

    if (!isAssigned) {
      btnAssigner.classList.remove('hidden');
    } else if (isMine) {
      if (commande.statut === 'prete') {
        btnDesassigner.classList.remove('hidden');
      }
      if (commande.statut === 'en_livraison') {
        btnMarquerLivree.classList.remove('hidden');
      }
    }

    detailModal.showModal();
  };

  // S'assigner
  document.getElementById('btnAssigner').addEventListener('click', async () => {
    if (!confirm('Vous assigner cette livraison ?')) return;

    try {
      const commande = allCommandes.find(c => c.id === currentCommandeId);
      
      await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...commande,
          livreur_id: livreurInfo.id,
          livreur_nom: livreurInfo.nom,
          statut: 'en_livraison'
        })
      });

      detailModal.close();
      await loadCommandes();
    } catch (error) {
      console.error('Erreur assignation:', error);
      alert('Erreur lors de l\'assignation');
    }
  });

  // Se dÃ©sassigner
  document.getElementById('btnDesassigner').addEventListener('click', async () => {
    if (!confirm('Vous retirer de cette livraison ?')) return;

    try {
      const commande = allCommandes.find(c => c.id === currentCommandeId);
      
      await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...commande,
          livreur_id: null,
          livreur_nom: null,
          statut: 'prete'
        })
      });

      detailModal.close();
      await loadCommandes();
    } catch (error) {
      console.error('Erreur dÃ©sassignation:', error);
      alert('Erreur lors de la dÃ©sassignation');
    }
  });

  // Marquer livrÃ©e
  document.getElementById('btnMarquerLivree').addEventListener('click', async () => {
    if (!confirm('Confirmer la livraison ?')) return;

    try {
      const commande = allCommandes.find(c => c.id === currentCommandeId);
      
      await fetch(`https://api.cmdola.be/api/${RESTAURANT_ID}/commandes/${currentCommandeId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...commande,
          statut: 'livree'
        })
      });

      detailModal.close();
      await loadCommandes();
      alert('Livraison confirmÃ©e ! ðŸŽ‰');
    } catch (error) {
      console.error('Erreur livraison:', error);
      alert('Erreur lors de la confirmation');
    }
  });

  // Event listeners
  document.getElementById('filterAffichage').addEventListener('change', (e) => {
    currentFilter = e.target.value;
    applyFilters();
  });

  document.getElementById('filterTri').addEventListener('change', (e) => {
    currentSort = e.target.value;
    applyFilters();
  });

  // Auto-refresh
  function startAutoRefresh() {
    if (autoRefreshInterval) return;
    autoRefreshInterval = setInterval(() => {
      loadCommandes(true);
    }, 10000);
  }

  // Init
  loadConfig();
  loadCommandes();
  startAutoRefresh();

  window.addEventListener('beforeunload', () => {
    if (autoRefreshInterval) clearInterval(autoRefreshInterval);
  });
</script>

</html>