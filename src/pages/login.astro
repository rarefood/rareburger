---
// src/pages/login.astro
// ============================================
// üîê CMDOLA - Page de Connexion Unique
// ============================================

import "../assets/app.css";

export const prerender = false;

// Pas de v√©rification auth ici car c'est la page de login
// Si d√©j√† connect√©, rediriger selon le r√¥le (g√©r√© c√¥t√© client)
---

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex, nofollow" />
  <title>Connexion - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
  <style>
    .role-card {
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .role-card:hover {
      transform: translateY(-8px);
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .fade-in {
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>

<body class="min-h-screen bg-gradient-to-br from-base-200 to-base-300">
  
  <div class="min-h-screen flex items-center justify-center p-4">
    <div class="max-w-2xl w-full">
      
      <!-- Header -->
      <div class="text-center mb-8 fade-in">
        <div class="flex justify-center mb-6">
          <img src="/favicon.ico" alt="Logo" class="w-24 h-24 rounded-3xl shadow-2xl" id="logoImage" />
        </div>
        <h1 class="text-5xl font-bold text-primary mb-3" id="restaurantName">CMDOLA</h1>
        <p class="text-xl text-base-content/70">Espace Professionnel</p>
      </div>

      <!-- Formulaire de connexion -->
      <div id="loginSection" class="card bg-base-100 shadow-2xl fade-in">
        <div class="card-body p-8">
          
          <h2 class="card-title text-3xl justify-center mb-8">Connexion</h2>
          
          <form id="loginForm" class="space-y-6">
            
            <!-- Username -->
            <div class="form-control">
              <label class="label">
                <span class="label-text text-lg font-semibold">Nom d'utilisateur</span>
              </label>
              <input 
                type="text" 
                id="username"
                name="username"
                placeholder="Votre identifiant" 
                class="input input-bordered input-lg text-lg" 
                required
                autocomplete="username"
                autofocus
              />
            </div>

            <!-- Password -->
            <div class="form-control">
              <label class="label">
                <span class="label-text text-lg font-semibold">Mot de passe</span>
              </label>
              <input 
                type="password" 
                id="password"
                name="password"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                class="input input-bordered input-lg text-lg" 
                required
                autocomplete="current-password"
              />
            </div>

            <!-- Alert erreur -->
            <div id="errorAlert" class="alert alert-error hidden">
              <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span id="errorMessage">Une erreur est survenue</span>
            </div>

            <!-- Bouton connexion -->
            <div class="form-control mt-8">
              <button type="submit" class="btn btn-primary btn-lg text-xl h-16" id="submitBtn">
                <span id="btnText">Se connecter</span>
                <span id="btnLoader" class="loading loading-spinner loading-lg hidden"></span>
              </button>
            </div>

          </form>

          <div class="divider text-sm text-base-content/50 mt-8">
            Interface r√©serv√©e au personnel
          </div>

        </div>
      </div>

      <!-- Choix du r√¥le (si plusieurs r√¥les) -->
      <div id="roleSelectionSection" class="hidden fade-in">
        
        <div class="card bg-base-100 shadow-2xl mb-6">
          <div class="card-body p-8 text-center">
            <h2 class="text-3xl font-bold mb-2">Bienvenue, <span id="userName">Utilisateur</span> ! üëã</h2>
            <p class="text-lg text-base-content/70">Choisissez votre interface :</p>
          </div>
        </div>

        <div class="grid gap-6" id="rolesContainer">
          <!-- Rempli dynamiquement par JS -->
        </div>

        <div class="text-center mt-6">
          <button id="backBtn" class="btn btn-ghost btn-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Retour
          </button>
        </div>

      </div>

      <!-- Retour au site -->
      <div class="text-center mt-6">
        <a href="/" class="btn btn-ghost btn-lg">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Retour au site
        </a>
      </div>

    </div>
  </div>

</body>
</html>

<script>
// ==========================================
// üöÄ Imports
// ==========================================
import { api } from '../lib/api';

// ==========================================
// Variables Globales
// ==========================================
let currentUser = null;
let currentToken = null;

// Configuration des r√¥les
const ROLE_CONFIG = {
  admin: {
    icon: 'üè¢',
    label: 'Administration',
    description: 'Gestion compl√®te du restaurant',
    color: 'bg-primary',
    url: '/admin'
  },
  chef: {
    icon: 'üë®‚Äçüç≥',
    label: 'Cuisine',
    description: 'Pr√©paration des commandes',
    color: 'bg-warning',
    url: '/cuisine'
  },
  livreur: {
    icon: 'üöó',
    label: 'Livraison',
    description: 'Gestion des livraisons',
    color: 'bg-info',
    url: '/livraison'
  }
};

// ==========================================
// Chargement Config & Th√®me
// ==========================================
async function loadConfig() {
  try {
    console.log('üîÑ Chargement config...');
    
    // ‚úÖ Utilise api.ts
    const config = await api.config.get();
    
    if (config.theme?.daisy) {
      document.documentElement.setAttribute('data-theme', config.theme.daisy);
    }
    
    if (config.theme?.logo) {
      // ‚úÖ Utilise api.images.getUrl()
      const logoUrl = api.images.getUrl(config.theme.logo);
      const favicon = document.getElementById('favicon');
      const logoImage = document.getElementById('logoImage');
      if (favicon) favicon.href = logoUrl;
      if (logoImage) logoImage.src = logoUrl;
    }

    if (config.nom) {
      const nameEl = document.getElementById('restaurantName');
      if (nameEl) nameEl.textContent = config.nom;
    }
    
    console.log('‚úÖ Config charg√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur config:', error);
    // Th√®me par d√©faut en cas d'erreur
    document.documentElement.setAttribute('data-theme', 'autumn');
  }
}

// ==========================================
// V√©rifier si d√©j√† connect√©
// ==========================================
async function checkExistingSession() {
  try {
    // V√©rifier si un token existe
    const cookies = document.cookie.split(';');
    const tokenCookie = cookies.find(c => c.trim().startsWith('admin_token='));
    
    if (!tokenCookie) return;
    
    console.log('üîç Token existant d√©tect√©, v√©rification...');
    
    // ‚úÖ V√©rifier le token via api.ts
    const result = await api.auth.verify();
    
    if (result.valid && result.roles && result.roles.length > 0) {
      console.log('‚úÖ Session valide, redirection...');
      
      // Rediriger vers la premi√®re interface accessible
      const role = result.roles[0];
      const config = ROLE_CONFIG[role];
      if (config) {
        window.location.href = config.url;
      }
    }
  } catch (error) {
    // Token invalide ou expir√©, on reste sur la page de login
    console.log('‚ö†Ô∏è Session invalide ou expir√©e');
  }
}

// ==========================================
// Affichage Erreur
// ==========================================
function showError(message) {
  const errorAlert = document.getElementById('errorAlert');
  const errorMessage = document.getElementById('errorMessage');
  
  errorMessage.textContent = message;
  errorAlert.classList.remove('hidden');
  
  setTimeout(() => {
    errorAlert.classList.add('hidden');
  }, 5000);
}

// ==========================================
// Gestion Formulaire de Connexion
// ==========================================
const loginForm = document.getElementById('loginForm');
const errorAlert = document.getElementById('errorAlert');
const submitBtn = document.getElementById('submitBtn');
const btnText = document.getElementById('btnText');
const btnLoader = document.getElementById('btnLoader');

loginForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  errorAlert.classList.add('hidden');
  submitBtn.disabled = true;
  btnText.classList.add('hidden');
  btnLoader.classList.remove('hidden');

  const username = document.getElementById('username').value.trim();
  const password = document.getElementById('password').value;

  try {
    console.log('üîê Tentative de connexion...', username);
    
    // ‚úÖ Utilise api.auth.login()
    const data = await api.auth.login(username, password);

    if (!data.success) {
      throw new Error(data.message || 'Identifiants incorrects');
    }

    console.log('‚úÖ Connexion r√©ussie:', data);

    // Sauvegarder les infos
    currentUser = data;
    currentToken = data.token;

    // Si un seul r√¥le, redirection directe
    if (data.roles.length === 1) {
      const role = data.roles[0];
      console.log(`‚Üí Un seul r√¥le (${role}), redirection directe`);
      await selectRole(role);
    } 
    // Si plusieurs r√¥les, afficher le choix
    else {
      console.log(`‚Üí Plusieurs r√¥les (${data.roles.join(', ')}), affichage du choix`);
      showRoleSelection();
    }

  } catch (error) {
    console.error('‚ùå Erreur login:', error);
    showError(error.message || 'Erreur de connexion');
    
    submitBtn.disabled = false;
    btnText.classList.remove('hidden');
    btnLoader.classList.add('hidden');
  }
});

// ==========================================
// Afficher S√©lection de R√¥le
// ==========================================
function showRoleSelection() {
  document.getElementById('loginSection').classList.add('hidden');
  document.getElementById('roleSelectionSection').classList.remove('hidden');

  // Afficher le nom de l'utilisateur
  document.getElementById('userName').textContent = currentUser.name || currentUser.username;

  // G√©n√©rer les cartes de r√¥les
  const rolesContainer = document.getElementById('rolesContainer');
  rolesContainer.innerHTML = '';

  currentUser.roles.forEach(role => {
    const config = ROLE_CONFIG[role];
    if (!config) return;

    const card = document.createElement('div');
    card.className = `card ${config.color} text-base-100 shadow-xl role-card`;
    card.innerHTML = `
      <div class="card-body p-8">
        <div class="flex items-center gap-4 mb-4">
          <div class="text-6xl">${config.icon}</div>
          <div class="flex-1">
            <h3 class="card-title text-3xl mb-2">${config.label}</h3>
            <p class="text-lg opacity-90">${config.description}</p>
          </div>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </div>
      </div>
    `;
    
    card.addEventListener('click', () => selectRole(role));
    rolesContainer.appendChild(card);
  });
}

// ==========================================
// S√©lectionner un R√¥le
// ==========================================
async function selectRole(role) {
  console.log(`‚úÖ R√¥le s√©lectionn√©: ${role}`);

  const config = ROLE_CONFIG[role];
  if (!config) {
    showError('R√¥le invalide');
    return;
  }

  try {
    // Sauvegarder le token dans un cookie
    // Le cookie sera utilis√© par le middleware
    document.cookie = `admin_token=${currentToken}; path=/; max-age=86400; SameSite=Strict`;
    
    console.log(`‚Üí Redirection vers ${config.url}`);
    
    // Rediriger vers l'interface appropri√©e
    window.location.href = config.url;

  } catch (error) {
    console.error('‚ùå Erreur s√©lection r√¥le:', error);
    showError('Erreur lors de la redirection');
  }
}

// ==========================================
// Bouton Retour
// ==========================================
document.getElementById('backBtn')?.addEventListener('click', () => {
  document.getElementById('roleSelectionSection').classList.add('hidden');
  document.getElementById('loginSection').classList.remove('hidden');
  
  // Reset formulaire
  submitBtn.disabled = false;
  btnText.classList.remove('hidden');
  btnLoader.classList.add('hidden');
  
  currentUser = null;
  currentToken = null;
});

// ==========================================
// Initialisation
// ==========================================
console.log('üîê Page de connexion charg√©e');

loadConfig();
checkExistingSession();

// Focus sur le champ username
document.getElementById('username')?.focus();
</script>