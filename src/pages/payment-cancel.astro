---
// src/pages/payment-cancel.astro
// ============================================
// ❌ CMDOLA - Paiement annulé
// ============================================

import Navbar from '../components/Navbar.astro';
import '../assets/app.css';

const orderId = Astro.url.searchParams.get('order');
const reason = Astro.url.searchParams.get('reason');

// ❌ SUPPRIMÉ: Plus besoin de ces variables
// const restaurantId = import.meta.env.PUBLIC_DEFAULT_RESTAURANT_ID || 'rare-burger';
// const apiBaseUrl = import.meta.env.PUBLIC_API_URL || 'https://api.cmdola.be/api';
---

<!DOCTYPE html>
<html lang="fr" >
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex, nofollow" />
  <title>Paiement annulé - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
</head>

<body class="bg-base-200 min-h-screen">
  
  <Navbar />
  
  <div class="container mx-auto px-4 py-8">
    
    <div class="max-w-2xl mx-auto">
      
      <!-- Message d'erreur principal -->
      <div class="alert alert-error shadow-lg mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
          <h3 class="font-bold text-xl">Paiement non finalisé</h3>
          <div class="text-sm mt-1" id="error-message">Votre paiement n'a pas pu être finalisé</div>
        </div>
      </div>

      <!-- Carte d'explication -->
      <div class="card bg-base-100 shadow-sm mb-6">
        <div class="card-body">
          <h2 class="card-title">Que s'est-il passé ?</h2>
          <div class="divider my-2"></div>
          
          <div class="space-y-4">
            <div id="reason-explanation" class="text-base-content/80">
              <!-- Rempli par JS selon la raison -->
            </div>

            <div class="alert alert-info">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div class="text-sm">
                <p class="font-semibold">Bonne nouvelle !</p>
                <p>Votre panier a été conservé. Vous pouvez réessayer votre paiement à tout moment.</p>
              </div>
            </div>

            <div id="order-info" class="bg-base-200 p-4 rounded-lg" style="display: none;">
              <p class="text-sm text-base-content/70 mb-2">Numéro de commande :</p>
              <p class="font-mono font-bold text-lg" id="order-numero"></p>
            </div>
          </div>
        </div>
      </div>

      <!-- Actions -->
      <div class="card bg-base-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Que voulez-vous faire ?</h3>
          <div class="divider my-2"></div>
          
          <div class="space-y-3">
            
            <!-- Retour au panier -->
            <a href="/cart" class="btn btn-primary btn-block btn-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              Retourner au panier
            </a>

            <!-- Réessayer le paiement -->
            <button id="retry-payment-btn" class="btn btn-outline btn-block" style="display: none;">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Réessayer le paiement
            </button>

            <div class="divider">OU</div>

            <!-- Changer le mode de paiement -->
            <a href="/checkout" class="btn btn-ghost btn-block">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              Choisir un autre mode de paiement
            </a>

            <!-- Retour au menu -->
            <a href="/menu" class="btn btn-ghost btn-block">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Retour au menu
            </a>

          </div>
        </div>
      </div>

      <!-- Aide -->
      <div class="alert mt-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div class="text-sm">
          <p class="font-semibold">Besoin d'aide ?</p>
          <p>Si vous rencontrez des difficultés, n'hésitez pas à <a href="/contact" class="link link-primary">nous contacter</a></p>
        </div>
      </div>

    </div>
  </div>

</body>
</html>

<!-- Script 1 : Config et imports -->
<script>
  import api from '../lib/api';

  // Charger le thème et logo dynamiquement
  async function loadConfig() {
    try {
      const config = await api.config.get();
      
      if (config.theme?.daisy) {
        document.documentElement.setAttribute('data-theme', config.theme.daisy);
      }
      
      if (config.theme?.logo) {
        const logoUrl = api.images.getUrl(config.theme.logo);
        const favicon = document.getElementById('favicon');
        if (favicon) favicon.href = logoUrl;
      }
    } catch (error) {
      console.error('❌ Erreur config:', error);
      document.documentElement.setAttribute('data-theme', 'autumn');
    }
  }

  loadConfig();
</script>

<!-- Script 2 : Logique métier -->
<script define:vars={{ orderId, reason }}>
  import api from '../lib/api';

  // Messages selon la raison
  const reasonMessages = {
    'payment_pending': {
      title: 'Paiement non confirmé',
      description: `
        <p class="mb-3">Le paiement n'a pas été finalisé avec succès. Cela peut arriver pour plusieurs raisons :</p>
        <ul class="list-disc list-inside space-y-2 ml-4">
          <li>Vous avez annulé le paiement sur la page Stripe</li>
          <li>Votre carte a été refusée par votre banque</li>
          <li>Une erreur technique s'est produite</li>
          <li>Le délai de paiement a expiré</li>
        </ul>
      `
    },
    'cancelled': {
      title: 'Paiement annulé',
      description: `
        <p class="mb-3">Vous avez annulé le processus de paiement.</p>
        <p>Aucun montant n'a été débité de votre compte.</p>
      `
    },
    'insufficient_funds': {
      title: 'Fonds insuffisants',
      description: `
        <p class="mb-3">Votre carte ne dispose pas de fonds suffisants pour effectuer ce paiement.</p>
        <p>Veuillez utiliser une autre carte ou un autre mode de paiement.</p>
      `
    },
    'card_declined': {
      title: 'Carte refusée',
      description: `
        <p class="mb-3">Votre carte bancaire a été refusée.</p>
        <ul class="list-disc list-inside space-y-2 ml-4">
          <li>Vérifiez que vous avez saisi les bonnes informations</li>
          <li>Contactez votre banque si le problème persiste</li>
          <li>Essayez avec une autre carte</li>
        </ul>
      `
    },
    'expired_card': {
      title: 'Carte expirée',
      description: `
        <p class="mb-3">La carte bancaire utilisée est expirée.</p>
        <p>Veuillez utiliser une carte valide.</p>
      `
    },
    'processing_error': {
      title: 'Erreur de traitement',
      description: `
        <p class="mb-3">Une erreur technique est survenue lors du traitement de votre paiement.</p>
        <p>Veuillez réessayer dans quelques instants.</p>
      `
    },
    'default': {
      title: 'Paiement non finalisé',
      description: `
        <p class="mb-3">Votre paiement n'a pas pu être finalisé.</p>
        <p>Veuillez vérifier vos informations bancaires et réessayer.</p>
      `
    }
  };

  // Afficher le message selon la raison
  function displayReason() {
    const reasonData = reasonMessages[reason] || reasonMessages['default'];
    
    document.getElementById('error-message').textContent = reasonData.title;
    document.getElementById('reason-explanation').innerHTML = reasonData.description;
  }

  // Charger les infos de commande si disponible
  async function loadOrderInfo() {
    if (!orderId) return;

    try {
      // ⚠️ Cette route nécessite probablement un token admin
      // Pour l'instant on essaye sans token (route publique pour tracking)
      // Si ça échoue, c'est normal - le client ne peut pas accéder aux détails de commande sans auth
      
      // Note: Si tu veux que les clients puissent voir leur commande sans être admin,
      // il faudrait créer une route publique spécifique dans le backend comme:
      // GET /api/commandes/track/{order_id}?email={email}
      
      const response = await fetch(`${api.API_BASE_URL}/commandes/${orderId}`);
      if (response.ok) {
        const order = await response.json();
        
        document.getElementById('order-numero').textContent = order.numero;
        document.getElementById('order-info').style.display = 'block';
        
        // Afficher le bouton réessayer
        const retryBtn = document.getElementById('retry-payment-btn');
        retryBtn.style.display = 'block';
        
        retryBtn.addEventListener('click', () => {
          window.location.href = `/stripe-checkout?order=${orderId}`;
        });
      } else {
        console.warn('⚠️ Impossible de charger les détails de la commande (besoin authentification admin)');
        // Pas grave, on continue sans afficher le numéro de commande
      }
    } catch (error) {
      console.error('❌ Erreur chargement commande:', error);
      // Pas grave, la page fonctionne quand même
    }
  }

  // Vérifier que le panier existe
  function checkCart() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    if (cart.length === 0) {
      console.log('⚠️ Panier vide');
    } else {
      console.log(`✅ Panier conservé: ${cart.length} articles`);
    }
  }

  // Init
  displayReason();
  loadOrderInfo();
  checkCart();
</script>