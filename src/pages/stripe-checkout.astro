---
// src/pages/stripe-checkout.astro
// ============================================
// üí≥ CMDOLA - Stripe Checkout (CORRIG√â)
// ============================================

import Navbar from '../components/Navbar.astro';
import '../assets/app.css';

// Pas de prerender car contenu dynamique
export const prerender = false;

const orderId = Astro.url.searchParams.get('order');

if (!orderId) {
  return Astro.redirect('/cart');
}
---

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex, nofollow" />
  <title>Paiement - CMDOLA</title>
  <link rel="icon" type="image/png" href="/favicon.ico" id="favicon">
</head>

<body class="bg-base-200 min-h-screen">
  
  <Navbar />
  
  <div class="container mx-auto px-4 py-8">
    
    <!-- Chargement -->
    <div id="loading-section" class="flex flex-col items-center justify-center min-h-[60vh]">
      <span class="loading loading-spinner loading-lg text-primary mb-4"></span>
      <h2 class="text-2xl font-bold mb-2">Pr√©paration du paiement...</h2>
      <p class="text-base-content/60">Vous allez √™tre redirig√© vers la page de paiement s√©curis√©e</p>
      <div class="mt-4 text-sm text-base-content/50">
        <p>üîí Paiement s√©curis√© par Stripe</p>
      </div>
    </div>

    <!-- Erreur -->
    <div id="error-section" class="max-w-2xl mx-auto" style="display: none;">
      <div class="alert alert-error shadow-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 shrink-0 stroke-current" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
          <h3 class="font-bold">Erreur de paiement</h3>
          <div id="error-message" class="text-sm"></div>
        </div>
      </div>
      
      <div class="flex gap-4 mt-6 justify-center">
        <a href="/cart" class="btn btn-outline">
          Retour au panier
        </a>
        <button id="retry-btn" class="btn btn-primary">
          R√©essayer
        </button>
      </div>
    </div>

    <!-- R√©capitulatif (affich√© pendant le chargement) -->
    <div id="summary-section" class="max-w-2xl mx-auto mt-8" style="display: none;">
      <div class="card bg-base-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">R√©capitulatif de votre commande</h3>
          <div class="divider my-2"></div>
          
          <div id="order-summary" class="space-y-2">
            <!-- Rempli par JS -->
          </div>
          
          <div class="divider my-2"></div>
          
          <div class="flex justify-between text-lg">
            <span class="font-bold">Total √† payer</span>
            <span id="total-amount" class="font-bold text-primary">0.00‚Ç¨</span>
          </div>
        </div>
      </div>
      
      <div class="alert alert-info mt-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div class="text-sm">
          <p class="font-semibold">Paiement s√©curis√©</p>
          <p>Vos informations de paiement sont prot√©g√©es par Stripe</p>
        </div>
      </div>
    </div>

  </div>

</body>
</html>

<script>
// ==========================================
// üöÄ Imports
// ==========================================
import { api } from '../lib/api';

// ==========================================
// Configuration & Variables
// ==========================================
const urlParams = new URLSearchParams(window.location.search);
const orderId = urlParams.get('order');

let currentOrder = null;

// ==========================================
// Utilitaires
// ==========================================
function formatPrice(price) {
  return new Intl.NumberFormat('fr-BE', {
    style: 'currency',
    currency: 'EUR',
  }).format(price);
}

// ==========================================
// Chargement Config & Th√®me
// ==========================================
async function loadConfig() {
  try {
    console.log('üîÑ Chargement config...');
    
    // ‚úÖ Utilise api.ts
    const config = await api.config.get();
    
    if (config.theme?.daisy) {
      document.documentElement.setAttribute('data-theme', config.theme.daisy);
    }
    
    if (config.theme?.logo) {
      // ‚úÖ Utilise api.images.getUrl()
      const logoUrl = api.images.getUrl(config.theme.logo);
      const favicon = document.getElementById('favicon');
      if (favicon) favicon.href = logoUrl;
    }
    
    console.log('‚úÖ Config charg√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur config:', error);
    document.documentElement.setAttribute('data-theme', 'autumn');
  }
}

// ==========================================
// Chargement Commande
// ==========================================
async function loadOrder(orderId) {
  try {
    console.log('üì¶ Chargement commande:', orderId);
    
    // ‚úÖ Utilise api.commandes.getPublic()
    const order = await api.commandes.getPublic(orderId);
    
    console.log('‚úÖ Commande charg√©e:', order);
    
    currentOrder = order;
    displayOrderSummary(order);
    
    return order;
    
  } catch (error) {
    console.error('‚ùå Erreur chargement commande:', error);
    // On continue m√™me si on ne peut pas charger les d√©tails
    return null;
  }
}

// ==========================================
// Affichage R√©sum√©
// ==========================================
function displayOrderSummary(order) {
  const summarySection = document.getElementById('summary-section');
  const orderSummary = document.getElementById('order-summary');
  const totalAmount = document.getElementById('total-amount');
  
  if (!orderSummary || !totalAmount) return;
  
  // Articles
  let summaryHTML = '';
  for (const article of order.articles) {
    const articleTotal = article.prix * article.quantite;
    summaryHTML += `
      <div class="flex justify-between text-sm">
        <div class="flex-1">
          <span class="font-medium">${article.quantite}x ${article.nom}</span>
          ${article.supplements && article.supplements.length > 0 ? `
            <div class="text-xs text-base-content/60 ml-4">
              + ${article.supplements.map(s => s.name).join(', ')}
            </div>
          ` : ''}
        </div>
        <span class="font-semibold">${formatPrice(articleTotal)}</span>
      </div>
    `;
  }
  
  // Sous-total
  summaryHTML += `
    <div class="divider my-2"></div>
    <div class="flex justify-between text-sm">
      <span class="text-base-content/70">Sous-total</span>
      <span>${formatPrice(order.sous_total)}</span>
    </div>
  `;
  
  // Frais de livraison
  if (order.frais_livraison && order.frais_livraison > 0) {
    summaryHTML += `
      <div class="flex justify-between text-sm text-base-content/70">
        <span>Frais de livraison</span>
        <span>${formatPrice(order.frais_livraison)}</span>
      </div>
    `;
  }
  
  orderSummary.innerHTML = summaryHTML;
  totalAmount.textContent = formatPrice(order.prix_total);
  
  summarySection.style.display = 'block';
}

// ==========================================
// Cr√©ation Session Stripe
// ==========================================
async function createCheckoutSession() {
  try {
    console.log('üîÑ Cr√©ation session Stripe pour commande:', orderId);
    
    // Charger les d√©tails de la commande d'abord
    await loadOrder(orderId);
    
    // Petit d√©lai pour que l'utilisateur voie le r√©cap
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Cr√©er la session Stripe
    console.log('üí≥ Appel API Stripe...');
    
    // ‚úÖ Utilise api.stripe.createCheckoutSession()
    const sessionData = await api.stripe.createCheckoutSession(orderId);
    
    console.log('‚úÖ Session Stripe cr√©√©e:', sessionData);
    
    // Rediriger vers Stripe Checkout
    if (sessionData.url) {
      console.log('üîÑ Redirection vers Stripe...');
      
      // Mettre √† jour le message de chargement
      const loadingTitle = document.querySelector('#loading-section h2');
      if (loadingTitle) {
        loadingTitle.textContent = 'Redirection vers le paiement...';
      }
      
      // Rediriger
      window.location.href = sessionData.url;
    } else {
      throw new Error('URL de paiement manquante dans la r√©ponse');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    showError(error.message || 'Erreur lors de la cr√©ation de la session de paiement');
  }
}

// ==========================================
// Gestion Erreurs
// ==========================================
function showError(message) {
  document.getElementById('loading-section').style.display = 'none';
  document.getElementById('summary-section').style.display = 'none';
  document.getElementById('error-section').style.display = 'block';
  document.getElementById('error-message').textContent = message;
}

// ==========================================
// Event Listeners
// ==========================================

// Bouton r√©essayer
document.getElementById('retry-btn')?.addEventListener('click', () => {
  document.getElementById('error-section').style.display = 'none';
  document.getElementById('summary-section').style.display = 'none';
  document.getElementById('loading-section').style.display = 'flex';
  createCheckoutSession();
});

// ==========================================
// Initialisation
// ==========================================
console.log('üí≥ Page Stripe Checkout charg√©e');

loadConfig();

// Lancer la cr√©ation de la session au chargement
if (orderId) {
  console.log('üöÄ Initialisation Stripe Checkout pour:', orderId);
  createCheckoutSession();
} else {
  showError('Aucune commande sp√©cifi√©e');
}

// Emp√™cher le retour arri√®re accidentel
let isRedirecting = false;
window.addEventListener('beforeunload', (e) => {
  if (!isRedirecting && document.getElementById('loading-section').style.display !== 'none') {
    e.preventDefault();
    e.returnValue = '';
    return '√ätes-vous s√ªr de vouloir quitter ? Votre session de paiement sera perdue.';
  }
});
</script>